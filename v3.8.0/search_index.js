var documenterSearchIndex = {"docs":
[{"location":"notes/#Notes","page":"Notes","title":"Notes","text":"","category":"section"},{"location":"notes/#Methods","page":"Notes","title":"Methods","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"Non-exhaustive list of methods description:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"title!(plot::Plot, title::String)\ntitle the string to write in the top center of the plot window. If the title is empty the whole line of the title will not be drawn\nxlabel!(plot::Plot, xlabel::String)\nxlabel the string to display on the bottom of the plot window. If the title is empty the whole line of the label will not be drawn\nylabel!(plot::Plot, xlabel::String)\nylabel the string to display on the far left of the plot window.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"The method label! is responsible for the setting all the textual decorations of a plot. It has two functions:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"label!(plot::Plot, where::Symbol, value::String)\nwhere can be any of: :tl (top-left), :t (top-center), :tr (top-right), :bl (bottom-left), :b (bottom-center), :br (bottom-right), :l (left), :r (right)\nlabel!(plot::Plot, where::Symbol, row::Int, value::String)\nwhere can be any of: :l (left), :r (right)\nrow can be between 1 and the number of character rows of the canvas","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"using UnicodePlots  # hide\nx = y = collect(1:10)\nplt = lineplot(x, y, canvas=DotCanvas, height=10, width=30)\nlineplot!(plt, x, reverse(y))\ntitle!(plt, \"Plot Title\")\nfor loc in (:tl, :t, :tr, :bl, :b, :br)\n  label!(plt, loc, string(':', loc))\nend\nlabel!(plt, :l, \":l\")\nlabel!(plt, :r, \":r\")\nfor i in 1:10\n  label!(plt, :l, i, string(i))\n  label!(plt, :r, i, string(i))\nend\nplt","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"annotate!(plot::Plot, x::Number, y::Number, text::AbstractString; kw...)\ntext arbitrary annotation at position (x, y)","category":"page"},{"location":"notes/#Keywords","page":"Notes","title":"Keywords","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"using UnicodePlots\nusing Markdown\nindent(x, n=1, tab=' '^2) = tab^n * join(x isa AbstractVector ? x : split(x, '\\n'), '\\n' * tab^n)\nex(x) = join((\"```@example\", \"using UnicodePlots  # hide\", x, \"```\"), '\\n')\ndesc_ex(k, d, n=2) = begin\n  return d  # FIXME: temporarily disable examples (fails to render properly)\n  if k ≡ :border\n    join((\n      d,\n      indent(ex(\"lineplot([-1., 2, 3, 7], [1.,2, 9, 4], canvas=DotCanvas, border=:dashed)\"), n),\n      indent(ex(\"lineplot([-1., 2, 3, 7], [1.,2, 9, 4], canvas=DotCanvas, border=:ascii)\"), n),\n      indent(ex(\"lineplot([-1., 2, 3, 7], [1.,2, 9, 4], canvas=DotCanvas, border=:bold)\"), n),\n      indent(ex(\"lineplot([-1., 2, 3, 7], [1.,2, 9, 4], border=:dotted)\"), n),\n      indent(ex(\"lineplot([-1., 2, 3, 7], [1.,2, 9, 4], border=:none)\"), n),\n    ), '\\n')\n  elseif k ≡ :width\n    join((d, indent(ex(\"lineplot(1:.5:20, sin, width=60)\"), n)), '\\n')\n  elseif k ≡ :height\n    join((d, indent(ex(\"lineplot(1:.5:20, sin, height=18)\"), n)), '\\n')\n  elseif k ≡ :labels\n    join((d, indent(ex(\"lineplot(1:.5:20, sin, labels=false)\"), n)), '\\n')\n  else\n    d\n  end\nend\n\"All plots support the set (or a subset) of the following named parameters:\\n\" * join(\n  (\n    \"- `$(UnicodePlots.default_with_type(k))`: $(desc_ex(k, d * '.'))\"\n    for (k, d) ∈ pairs(UnicodePlots.DESCRIPTION) if k ∈ keys(UnicodePlots.KEYWORDS)\n  ), '\\n'\n) |> Markdown.parse","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"Note: If you want to print the plot into a file but have monospace issues with your font, you should probably try setting border=:ascii and canvas=AsciiCanvas (or canvas=DotCanvas for scatterplots).","category":"page"},{"location":"notes/#Saving-figures","page":"Notes","title":"Saving figures","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"Saving plots as png or txt files using the savefig command is supported (saving as png is experimental and requires import FreeType, FileIO before loading UnicodePlots).","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"To recover the plot as a string with ansi color codes use string(p; color=true).","category":"page"},{"location":"notes/#Color-mode","page":"Notes","title":"Color mode","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"When the COLORTERM environment variable is set to either 24bit or truecolor, UnicodePlots will use 24bit colors as opposed to 8bit colors or even 4bit colors for named colors.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"One can force a specific colormode using either UnicodePlots.truecolors!() or UnicodePlots.colors256!().","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"Named colors such as :red or :light_red will use 256 color values (rendering will be terminal dependent). In order to force named colors to use true colors instead, use UnicodePlots.USE_LUT[]=true.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"The default color cycle can be changed to bright (high intensity) colors using UnicodePlots.brightcolors!() instead of the default UnicodePlots.faintcolors!().","category":"page"},{"location":"notes/#3D-plots","page":"Notes","title":"3D plots","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"3D plots use a so-called \"Model-View-Projection\" transformation matrix MVP on input data to project 3D plots to a 2D screen.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"Use keywordselevation, azimuth, up or zoom to control the view matrix, a.k.a. camera.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"The projection type for MVP can be set to either :persp(ective) or :ortho(graphic).","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"Displaying the x, y, and z axes can be controlled using the axes3d keyword.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"For enhanced resolution, use a wider and/or taller Plot (this can be achieved using default_size!(width=60) for all future plots).","category":"page"},{"location":"notes/#Layout","page":"Notes","title":"Layout","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"UnicodePlots is integrated in Plots as a backend, with support for basic layout.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"For a more complex layout, use the gridplot function (requires loading Term as extension).","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"using UnicodePlots, Term\n\n(\n  UnicodePlots.panel(lineplot(1:2)) *\n  UnicodePlots.panel(scatterplot(rand(100)))\n) / (\n  UnicodePlots.panel(lineplot(2:-1:1)) * \n  UnicodePlots.panel(densityplot(randn(1_000), randn(1_000)))\n)","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"gridplot(map(i -> lineplot(-i:i), 1:5); show_placeholder=true)","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"gridplot(map(i -> lineplot(-i:i), 1:3); layout=(2, nothing))","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"gridplot(map(i -> lineplot(-i:i), 1:3); layout=(nothing, 1))","category":"page"},{"location":"notes/#Known-issues","page":"Notes","title":"Known issues","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"Using a non true monospace font can lead to visual problems on a BrailleCanvas (border versus canvas).","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"Either change the font to e.g. JuliaMono or use border=:dotted keyword argument in the plots.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"For a Jupyter notebook with the IJulia kernel see here.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"(Experimental) Terminals seem to respect a standard aspect ratio of 4:3, hence a square matrix does not often look square in the terminal.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"You can pass the experimental keyword fix_ar=true to spy or heatmap in order to recover a unit aspect ratio.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Autogenerated-docstrings","page":"API","title":"Autogenerated docstrings","text":"","category":"section"},{"location":"api/#UnicodePlots.AsciiCanvas","page":"API","title":"UnicodePlots.AsciiCanvas","text":"As the name suggests the AsciiCanvas only uses ASCII characters to draw its content. Naturally, it doesn't look quite as nice as the Unicode-based ones. However, in some situations it might yield better results. Printing plots to a file is one of those situations.\n\nThe AsciiCanvas is best used in combination with lineplot. For scatterplot we suggest to use the DotCanvas instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.BarplotGraphics","page":"API","title":"UnicodePlots.BarplotGraphics","text":"BarplotGraphics\n\nStructure to hold bar based graphics.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.BlockCanvas","page":"API","title":"UnicodePlots.BlockCanvas","text":"The BlockCanvas is also Unicode-based. It has half the resolution of the BrailleCanvas. In contrast to BrailleCanvas, the pixels don't have visible spacing between them. This canvas effectively turns every character into four pixels that can individually be manipulated using binary operations.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.BoxplotGraphics","page":"API","title":"UnicodePlots.BoxplotGraphics","text":"BoxplotGraphics\n\nStructure to hold box based graphics.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.BrailleCanvas","page":"API","title":"UnicodePlots.BrailleCanvas","text":"The type of canvas with the highest resolution for Unicode-based plotting. It uses the Unicode characters for the Braille symbols to represent individual pixel. This effectively turns every character into eight pixels that can individually be manipulated using binary operations.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.DensityCanvas","page":"API","title":"UnicodePlots.DensityCanvas","text":"Unlike the BrailleCanvas, the density canvas does not simply mark a pixel as set. Instead it increments a counter per character that keeps track of the frequency of pixels drawn in that character. Together with a variable that keeps track of the maximum frequency, the canvas can thus draw the density of datapoints.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.DotCanvas","page":"API","title":"UnicodePlots.DotCanvas","text":"Similar to the AsciiCanvas, the DotCanvas only uses ASCII characters to draw its content. Naturally, it doesn't look quite as nice as the Unicode-based ones. However, in some situations it might yield better results. Printing plots to a file is one of those situations.\n\nThe DotCanvas is best used in combination with scatterplot. For lineplot we suggest to use the AsciiCanvas instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.HeatmapCanvas","page":"API","title":"UnicodePlots.HeatmapCanvas","text":"The HeatmapCanvas is also Unicode-based. It has a half the resolution of the BlockCanvas. This canvas effectively turns every character into two pixels (top and bottom).\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.ImageGraphics","page":"API","title":"UnicodePlots.ImageGraphics","text":"ImageGraphics\n\nStructure to hold an image.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.LookupCanvas","page":"API","title":"UnicodePlots.LookupCanvas","text":"Supertype for Look-Up Table (LUT) encoded canvases.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.MVP","page":"API","title":"UnicodePlots.MVP","text":"MVP(x, y, z; projection = :orthographic, elevation = 35.264389682754654, azimuth = 45.0, zoom = 1.0, up = :z)\n\nDescription\n\nBuild up the \"Model - View - Projection\" transformation matrix (see codinglabs.net/articleworldviewprojectionmatrix.aspx).\n\nThis is typically used to adjust how 3D plot is viewed, see also the projection keyword in surfaceplot, isosurface.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots.MVP-Union{Tuple{AbstractMatrix}, Tuple{T}, Tuple{AbstractMatrix, Symbol}} where T","page":"API","title":"UnicodePlots.MVP","text":"transform a matrix of points, with allocation\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.MVP-Union{Tuple{StaticArraysCore.SVector{4}}, Tuple{T}, Tuple{StaticArraysCore.SVector{4}, Symbol}} where T","page":"API","title":"UnicodePlots.MVP","text":"transform a vector\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.MVP-Union{Tuple{T}, Tuple{AbstractMatrix, AbstractMatrix}, Tuple{AbstractMatrix, AbstractMatrix, Symbol}} where T","page":"API","title":"UnicodePlots.MVP","text":"inplace transform\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.Plot","page":"API","title":"UnicodePlots.Plot","text":"Plot(graphics; kw...)\n\nDescription\n\nDecoration for objects that are GraphicsArea (or Canvas). It is used to surround the inner GraphicsArea object with additional information such as a title, border, and axis labels.\n\nUsage\n\nPlot(graphics; title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", border = :solid, compact = false, margin = 3, padding = 1, labels = true)\n\nPlot(x, y, z, canvas; title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\ngraphics : the GraphicsArea (e.g. a subtype of Canvas) that the plot should decorate.\nx : horizontal position for each point.\ny : vertical position for each point.\nz : depth position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nMethods\n\ntitle!(plot::Plot, title::String)\nxlabel!(plot::Plot, xlabel::String)\nylabel!(plot::Plot, xlabel::String)\nzlabel!(plot::Plot, zlabel::String)\nlabel!(plot::Plot, where::Symbol, value::String)\nlabel!(plot::Plot, where::Symbol, row::Integer, value::String)\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\n\nSee also\n\nscatterplot, lineplot, BarplotGraphics, BrailleCanvas, BlockCanvas, AsciiCanvas\n\n\n\n\n\n","category":"type"},{"location":"api/#UnicodePlots._show-Tuple{IO, Any, Any, Plot}","page":"API","title":"UnicodePlots._show","text":"Display a Plot object to a terminal emulator.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.annotate!-Tuple{Plot{<:Canvas}, Number, Number, Union{AbstractChar, AbstractString}}","page":"API","title":"UnicodePlots.annotate!","text":"annotate!(plot, x, y, text; kw...)\n\nDescription\n\nAdds text to the plot at the position (x, y).\n\nArguments\n\ntext : a string of text.\nx : horizontal position for each point.\ny : vertical position for each point.\ncolor::Symbol = :auto : choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\n\nExamples\n\njulia> plt = lineplot([1, 2, 7], [9, -6, 8], title = \"My Lineplot\");\njulia> annotate!(plt, 5, 5, \"My text\")\n       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My Lineplot⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n       ┌────────────────────────────────────────┐ \n    10 │⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠│ \n       │⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠤⠊⠁⠀│ \n       │⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My text⠀⠀⣀⠔⠊⠁⠀⠀⠀⠀│ \n       │⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠤⠤⠤⠼⡤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢤⠤⠶⠥⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│ \n       │⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠤⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⡠⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⢇⡠⠔⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   -10 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       └────────────────────────────────────────┘ \n       ⠀1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀7⠀\n\nSee also\n\nPlot, lineplot, scatterplot, stairs, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.arguments","page":"API","title":"UnicodePlots.arguments","text":"arguments([desc]; default = DEFAULT_KW, add = (), exclude = DEFAULT_EXCLUDED, remove = ())\n\nDefines arguments for docstring genreration.\n\nArguments\n\ndesc::NamedTuple: add argument description in the form arg = desc.\ndefault::Tuple: default UnicodePlots keywords.\nadd::Tuple: add extra symbols, not listed in default but present in DESCRIPTION.\nremove::Tuple: remove symbols from default.\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.barplot!-Tuple{Plot{<:BarplotGraphics}, AbstractVector{<:AbstractString}, AbstractVector{<:Number}}","page":"API","title":"UnicodePlots.barplot!","text":"barplot(text, heights; kw...)\nbarplot!(p, args...; kw...)\n\nDescription\n\nDraws a horizontal barplot. It uses the first parameter (text) to denote the names for the bars, and the second parameter (heights) as their values. This means that the two vectors have to have the same length. Alternatively, one can specify a barplot using a dictionary dict. In that case, the keys will be used as the names and the values, which have to be numeric, will be used as the heights of the bars.\n\nUsage\n\nbarplot(text, heights; border = :barplot, color = :green, maximum = nothing, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, width = 40, compact = false, blend = true, margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, symbols = ['■'], name = \"\")\nbarplot(dict; kw...)\n\nArguments\n\ntext : the labels / captions of the bars.\nheights : the values / heights of the bars.\ndict : a dictionary in which the keys will be used as text and the values will be used as heights.\nxscale::Symbol = :identity : Function or Symbol to transform the bar length before plotting: this effectively scales the x-axis without influencing the captions of the individual bars (use xscale = :log10 for logscale).\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\nmaximum : optional maximal height.\nsymbols::Array = ['■'] : collection of characters used to render the bars.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\n\nExamples\n\njulia> barplot([\"Paris\", \"New York\", \"Madrid\"],\n               [2.244, 8.406, 3.165],\n               xlabel = \"population [in mil]\")\n            ┌                                        ┐ \n      Paris ┤■■■■■■■■■ 2.244                           \n   New York ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 8.406   \n     Madrid ┤■■■■■■■■■■■■ 3.165                        \n            └                                        ┘ \n                        population [in mil]            \n\nSee also\n\nPlot, histogram, BarplotGraphics\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.barplot-Tuple{AbstractVector{<:AbstractString}, AbstractVector{<:Number}}","page":"API","title":"UnicodePlots.barplot","text":"barplot(text, heights; kw...)\nbarplot!(p, args...; kw...)\n\nDescription\n\nDraws a horizontal barplot. It uses the first parameter (text) to denote the names for the bars, and the second parameter (heights) as their values. This means that the two vectors have to have the same length. Alternatively, one can specify a barplot using a dictionary dict. In that case, the keys will be used as the names and the values, which have to be numeric, will be used as the heights of the bars.\n\nUsage\n\nbarplot(text, heights; border = :barplot, color = :green, maximum = nothing, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, width = 40, compact = false, blend = true, margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, symbols = ['■'], name = \"\")\nbarplot(dict; kw...)\n\nArguments\n\ntext : the labels / captions of the bars.\nheights : the values / heights of the bars.\ndict : a dictionary in which the keys will be used as text and the values will be used as heights.\nxscale::Symbol = :identity : Function or Symbol to transform the bar length before plotting: this effectively scales the x-axis without influencing the captions of the individual bars (use xscale = :log10 for logscale).\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\nmaximum : optional maximal height.\nsymbols::Array = ['■'] : collection of characters used to render the bars.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\n\nExamples\n\njulia> barplot([\"Paris\", \"New York\", \"Madrid\"],\n               [2.244, 8.406, 3.165],\n               xlabel = \"population [in mil]\")\n            ┌                                        ┐ \n      Paris ┤■■■■■■■■■ 2.244                           \n   New York ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 8.406   \n     Madrid ┤■■■■■■■■■■■■ 3.165                        \n            └                                        ┘ \n                        population [in mil]            \n\nSee also\n\nPlot, histogram, BarplotGraphics\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.boxplot!-Tuple{Plot{<:BoxplotGraphics}, AbstractVector{<:Number}}","page":"API","title":"UnicodePlots.boxplot!","text":"boxplot(data; kw...)\nboxplot!(p, args...; kw...)\n\nDescription\n\nDraws a box-and-whisker plot.\n\nThe first argument specifies the data to plot. This is a vector of vectors, with each inner vector representing a data series. We use a vector of vectors over a matrix to allow series of different lengths. Optionally, a list of text may be provided, with length equal to the number of series.\n\nAlternatively, one can specify a boxplot using a dictionary. In that case, the values, which have to be numeric, will be used as the data series, and the keys, which have to be strings, will be used as the labels.\n\nUsage\n\nboxplot([text], data; border = :corners, color = :green, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, width = 40, compact = false, blend = true, xlim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, name = \"\")\nboxplot(dict; kw...)\n\nArguments\n\ntext : the labels/captions of the boxes (optional).\ndata : a vector of vectors, with each inner vector representing a data series (choose a vector of vectors over a matrix to allow series of different lengths).\ndict : a dictionary in which the keys will be used as text and the values will be used as data.\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nMatthew Lake (github.com/mgtlake)\n\nExamples\n\njulia> boxplot([1, 2, 3, 7]; title = \"Test\")\n                       Test                    \n    ┌                                        ┐ \n     ╷   ┌────┬─────────┐                   ╷  \n     ├───┤    │         ├───────────────────┤  \n     ╵   └────┴─────────┘                   ╵  \n    └                                        ┘ \n     1                  4                   7  \n\nSee also\n\nPlot, histogram, BoxplotGraphics\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.boxplot-Tuple{AbstractVector{<:AbstractString}, AbstractVector{<:AbstractArray{<:Number}}}","page":"API","title":"UnicodePlots.boxplot","text":"boxplot(data; kw...)\nboxplot!(p, args...; kw...)\n\nDescription\n\nDraws a box-and-whisker plot.\n\nThe first argument specifies the data to plot. This is a vector of vectors, with each inner vector representing a data series. We use a vector of vectors over a matrix to allow series of different lengths. Optionally, a list of text may be provided, with length equal to the number of series.\n\nAlternatively, one can specify a boxplot using a dictionary. In that case, the values, which have to be numeric, will be used as the data series, and the keys, which have to be strings, will be used as the labels.\n\nUsage\n\nboxplot([text], data; border = :corners, color = :green, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, width = 40, compact = false, blend = true, xlim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, name = \"\")\nboxplot(dict; kw...)\n\nArguments\n\ntext : the labels/captions of the boxes (optional).\ndata : a vector of vectors, with each inner vector representing a data series (choose a vector of vectors over a matrix to allow series of different lengths).\ndict : a dictionary in which the keys will be used as text and the values will be used as data.\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nMatthew Lake (github.com/mgtlake)\n\nExamples\n\njulia> boxplot([1, 2, 3, 7]; title = \"Test\")\n                       Test                    \n    ┌                                        ┐ \n     ╷   ┌────┬─────────┐                   ╷  \n     ├───┤    │         ├───────────────────┤  \n     ╵   └────┴─────────┘                   ╵  \n    └                                        ┘ \n     1                  4                   7  \n\nSee also\n\nPlot, histogram, BoxplotGraphics\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.contourplot!-Tuple{Plot{<:Canvas}, AbstractVector, AbstractVector, AbstractMatrix}","page":"API","title":"UnicodePlots.contourplot!","text":"contourplot(x, y, A; kw...)\ncontourplot!(p, args...; kw...)\n\nDraws a contour plot on a new canvas.\n\nUsage\n\ncontourplot(x, y, A; canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, colorbar = false, colorbar_border = :solid, colorbar_lim = (0, 1), colormap = :viridis, yflip = false, xflip = false, name = \"\", zlim = (0, 0))\n\nArguments\n\nA : Matrix of interest for which contours are extracted, or Function evaluated as f(x, y).\nlevels : the number of contour levels.\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nzlabel::String = \"\" : text displayed on the z axis (colorbar) of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nzlim::Tuple = (0, 0) : colormap scaled data range.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncolorbar::Bool = false : toggle the colorbar.\ncolormap::Symbol = :viridis : choose a symbol from ColorSchemes.jl e.g. :viridis, or supply a function f: (z, zmin, zmax) -> Int(0-255), or a vector of RGB tuples.\ncolorbar_lim::Tuple = (0, 1) : colorbar limit.\ncolorbar_border::Symbol = :solid : color bar bounding box style (:solid, :bold, :dashed, :dotted, :ascii, :none).\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> contourplot(-1:.1:1, -1:.1:1, (x, y) -> 1000√(x^2 + y^2))\n      ┌────────────────────────────────────────┐ 1_000\n    1 │⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠒⠊⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠒⠢⣄⡀⠀⠀⠀⠀⠀⠀⠀│ ┌──┐ \n      │⠀⠀⠀⠀⠀⡠⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠤⡀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⢀⡰⠊⠀⠀⠀⠀⠀⠀⠀⢀⣀⠤⠔⠒⠒⠉⠉⠉⠉⠓⠒⠒⠤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠘⠢⡀⠀⠀│ │▄▄│ \n      │⠀⡰⠁⠀⠀⠀⠀⠀⠀⢀⡤⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠢⡀⠀⠀⠀⠀⠀⠀⠈⢆⠀│ │▄▄│ \n      │⡜⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠈⠢⡄⠀⠀⠀⠀⠀⠀⢣│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⢀⠔⠊⠁⠀⠀⠀⠀⠈⠙⠢⢄⠀⠀⠀⠀⠀⠀⠑⡄⠀⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⢠⠇⠀⠀⠀⠀⠀⠀⡜⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢣⠀⠀⠀⠀⠀⠀⢘⠄⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠠⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⠆⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⠣⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠀⠱⡀⠀⠀⠀⠀⠀⠀⠉⠒⣄⣀⠀⠀⠀⠀⢀⣀⠔⠉⠀⠀⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀│ │▄▄│ \n      │⢇⠀⠀⠀⠀⠀⠀⠘⠦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⡠⠃⠀⠀⠀⠀⠀⠀⡰│ │▄▄│ \n      │⠈⠢⡀⠀⠀⠀⠀⠀⠀⠈⠒⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠔⠋⠀⠀⠀⠀⠀⠀⢀⠖⠁│ │▄▄│ \n      │⠀⠀⠈⠱⣀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠒⠢⠤⢤⣀⣀⣀⣀⡠⠤⠤⠒⠊⠁⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠑⠦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠒⠁⠀⠀⠀⠀│ │▄▄│ \n   -1 │⠀⠀⠀⠀⠀⠀⠀⠀⠙⠒⠤⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠤⠔⠊⠁⠀⠀⠀⠀⠀⠀⠀│ └──┘ \n      └────────────────────────────────────────┘  0   \n      ⠀-1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀1⠀      \n\nSee also\n\nPlot, lineplot, BrailleCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.contourplot-Tuple{AbstractMatrix}","page":"API","title":"UnicodePlots.contourplot","text":"contourplot(A; kw...)\n\nUsage\n\nDraws a contour plot of matrix A along axis x and y on a new canvas.\n\nThe y axis is flipped by default:\n\nJulia matrices (images) │ UnicodePlots\n                        │\n           axes(A, 2)   │\n           o───────→    │   ↑\n           │            │   │\naxes(A, 1) │            │ y │\n           │            │   │\n           ↓            │   o───────→\n                        │       x\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.contourplot-Tuple{AbstractVector, AbstractVector, Union{Function, AbstractMatrix}}","page":"API","title":"UnicodePlots.contourplot","text":"contourplot(x, y, A; kw...)\ncontourplot!(p, args...; kw...)\n\nDraws a contour plot on a new canvas.\n\nUsage\n\ncontourplot(x, y, A; canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, colorbar = false, colorbar_border = :solid, colorbar_lim = (0, 1), colormap = :viridis, yflip = false, xflip = false, name = \"\", zlim = (0, 0))\n\nArguments\n\nA : Matrix of interest for which contours are extracted, or Function evaluated as f(x, y).\nlevels : the number of contour levels.\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nzlabel::String = \"\" : text displayed on the z axis (colorbar) of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nzlim::Tuple = (0, 0) : colormap scaled data range.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncolorbar::Bool = false : toggle the colorbar.\ncolormap::Symbol = :viridis : choose a symbol from ColorSchemes.jl e.g. :viridis, or supply a function f: (z, zmin, zmax) -> Int(0-255), or a vector of RGB tuples.\ncolorbar_lim::Tuple = (0, 1) : colorbar limit.\ncolorbar_border::Symbol = :solid : color bar bounding box style (:solid, :bold, :dashed, :dotted, :ascii, :none).\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> contourplot(-1:.1:1, -1:.1:1, (x, y) -> 1000√(x^2 + y^2))\n      ┌────────────────────────────────────────┐ 1_000\n    1 │⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠒⠊⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠒⠢⣄⡀⠀⠀⠀⠀⠀⠀⠀│ ┌──┐ \n      │⠀⠀⠀⠀⠀⡠⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠤⡀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⢀⡰⠊⠀⠀⠀⠀⠀⠀⠀⢀⣀⠤⠔⠒⠒⠉⠉⠉⠉⠓⠒⠒⠤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠘⠢⡀⠀⠀│ │▄▄│ \n      │⠀⡰⠁⠀⠀⠀⠀⠀⠀⢀⡤⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠢⡀⠀⠀⠀⠀⠀⠀⠈⢆⠀│ │▄▄│ \n      │⡜⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠈⠢⡄⠀⠀⠀⠀⠀⠀⢣│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀⠀⢀⠔⠊⠁⠀⠀⠀⠀⠈⠙⠢⢄⠀⠀⠀⠀⠀⠀⠑⡄⠀⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⢠⠇⠀⠀⠀⠀⠀⠀⡜⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢣⠀⠀⠀⠀⠀⠀⢘⠄⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠠⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⠆⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⠣⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⠀⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠀⠱⡀⠀⠀⠀⠀⠀⠀⠉⠒⣄⣀⠀⠀⠀⠀⢀⣀⠔⠉⠀⠀⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀│ │▄▄│ \n      │⢇⠀⠀⠀⠀⠀⠀⠘⠦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⡠⠃⠀⠀⠀⠀⠀⠀⡰│ │▄▄│ \n      │⠈⠢⡀⠀⠀⠀⠀⠀⠀⠈⠒⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠔⠋⠀⠀⠀⠀⠀⠀⢀⠖⠁│ │▄▄│ \n      │⠀⠀⠈⠱⣀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠒⠢⠤⢤⣀⣀⣀⣀⡠⠤⠤⠒⠊⠁⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀│ │▄▄│ \n      │⠀⠀⠀⠀⠀⠑⠦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠒⠁⠀⠀⠀⠀│ │▄▄│ \n   -1 │⠀⠀⠀⠀⠀⠀⠀⠀⠙⠒⠤⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠤⠔⠊⠁⠀⠀⠀⠀⠀⠀⠀│ └──┘ \n      └────────────────────────────────────────┘  0   \n      ⠀-1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀1⠀      \n\nSee also\n\nPlot, lineplot, BrailleCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.ctr_len_diag-Tuple{Any, Any, Any}","page":"API","title":"UnicodePlots.ctr_len_diag","text":"ctr_len_diag(x, y, z)\n\nDescription\n\nComputes data center, minimum and maximum points, and cube diagonal length.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.default_size!-Tuple{}","page":"API","title":"UnicodePlots.default_size!","text":"default_size!(;\n    height::Union{Integer,Nothing} = nothing,\n    width::Union{Integer,Nothing} = nothing,\n)\n\nChange and return the default plot size (height, width).\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.densityplot!-Tuple{Plot{<:DensityCanvas}, AbstractVector, AbstractVector}","page":"API","title":"UnicodePlots.densityplot!","text":"densityplot(x, y; kw...)\ndensityplot!(p, args...; kw...)\n\nDescription\n\nDraws a density plot for the given points.\n\nThe first vector x should contain the horizontal positions for all the points. The second vector y should contain the corresponding vertical positions respectively. The two vectors must thus be of the same length and ordering. One can pass an arbitrary dscale (Function or Symbol) for transforming density counts (e.g. peaks damping).\n\nUsage\n\ndensityplot(x, y; dscale = :identity, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\ndscale : density scale function.\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\n\nExamples\n\njulia> densityplot(randn(1_000), randn(1_000); title = \"Density Plot\")\n                     Density Plot                \n      ┌────────────────────────────────────────┐ \n    4 │                                        │ \n      │                                        │ \n      │                                        │ \n      │                                        │ \n      │          ░        ░░  ░                │ \n      │           ░ ░░░░░░▓▒▒▒░░░░░            │ \n      │            ░▒▒▓▒░▒▒▓▓▓▒▒░░░░           │ \n      │         ░░  ░░▓▓░▓▒█▓▒░░▒░░░           │ \n      │            ░░░▒▒▒░▒▓▒▒▒░░░░░           │ \n      │          ░  ░░░░░▓░░░░░░░ ░            │ \n      │                 ░░░░░ ░  ░             │ \n      │                                        │ \n      │                                        │ \n      │                                        │ \n   -4 │                                        │ \n      └────────────────────────────────────────┘ \n       -4                                     4  \n\nSee also\n\nPlot, scatterplot, DensityCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.densityplot-Tuple{AbstractVector, AbstractVector}","page":"API","title":"UnicodePlots.densityplot","text":"densityplot(x, y; kw...)\ndensityplot!(p, args...; kw...)\n\nDescription\n\nDraws a density plot for the given points.\n\nThe first vector x should contain the horizontal positions for all the points. The second vector y should contain the corresponding vertical positions respectively. The two vectors must thus be of the same length and ordering. One can pass an arbitrary dscale (Function or Symbol) for transforming density counts (e.g. peaks damping).\n\nUsage\n\ndensityplot(x, y; dscale = :identity, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\ndscale : density scale function.\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\n\nExamples\n\njulia> densityplot(randn(1_000), randn(1_000); title = \"Density Plot\")\n                     Density Plot                \n      ┌────────────────────────────────────────┐ \n    4 │                                        │ \n      │                                        │ \n      │                                        │ \n      │                                        │ \n      │          ░        ░░  ░                │ \n      │           ░ ░░░░░░▓▒▒▒░░░░░            │ \n      │            ░▒▒▓▒░▒▒▓▓▓▒▒░░░░           │ \n      │         ░░  ░░▓▓░▓▒█▓▒░░▒░░░           │ \n      │            ░░░▒▒▒░▒▓▒▒▒░░░░░           │ \n      │          ░  ░░░░░▓░░░░░░░ ░            │ \n      │                 ░░░░░ ░  ░             │ \n      │                                        │ \n      │                                        │ \n      │                                        │ \n   -4 │                                        │ \n      └────────────────────────────────────────┘ \n       -4                                     4  \n\nSee also\n\nPlot, scatterplot, DensityCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.draw_axes!-Union{Tuple{T}, Tuple{Any, T, T, T}, Tuple{Any, T, T, T, Any}} where T<:AbstractFloat","page":"API","title":"UnicodePlots.draw_axes!","text":"draw_axes!(plot, x, y, z, scale = 0.25)\n\nDescription\n\nDraws (X, Y, Z) cartesian coordinates axes in (R, G, B) colors, at position p = (x, y, z). If p = (x, y) is given, draws at screen coordinates instead.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.frustum-NTuple{6, Any}","page":"API","title":"UnicodePlots.frustum","text":"frustum(l, r, b, t, n, f)\n\nDescription\n\nComputes the perspective projection matrix (see songho.ca/opengl/gl_projectionmatrix.html#perspective).\n\nArguments\n\n- `l`: left coordinate of the vertical clipping plane.\n- `r`: right coordinate of the vertical clipping plane.\n- `b`: bottom coordinate of the horizontal clipping plane.\n- `t`: top coordinate of the horizontal clipping plane.\n- `n`: distance to the near depth clipping plane.\n- `f`: distance to the far depth clipping plane.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.heatmap-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"API","title":"UnicodePlots.heatmap","text":"heatmap(A; kw...)\n\nDescription\n\nDraws a heatmap for the given points. It uses the Matrix A as the values of the heatmap, with the column and row indices of the matrix as x and y coordinates respectively.\n\nUsage\n\nheatmap(A::AbstractMatrix; height = 0, width = 0, yfact = nothing, xfact = nothing, array = false, title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", xscale = :identity, yscale = :identity, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, colorbar = false, colorbar_border = :solid, colorbar_lim = (0, 1), colormap = :viridis, grid = true, yflip = false, xflip = false, name = \"\", zlim = (0, 0), fix_ar = false)\n\nArguments\n\nA : input matrix (color values).\nyfact : scale for the y coordinate labels (defaults to 0 - i.e. each row in A maps to one unit, y origin starting at 1). If set to anything else, the y origin will start at 0.\nxfact : scale for the x coordinate (defaults to 0 - i.e. each column in A maps to one unit, x origin starting at 1). If set to anything else, the x origin will start at 0.\nyoffset : plotting offset for the y coordinate (after scaling).\nxoffset : plotting offset for the x coordinate (after scaling).\narray : use array display convention (origin at the North-West corner of the plot, hence flipping y versus regular plots).\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nzlabel::String = \"\" : text displayed on the z axis (colorbar) of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nzlim::Tuple = (0, 0) : colormap scaled data range.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncolorbar::Bool = false : toggle the colorbar.\ncolormap::Symbol = :viridis : choose a symbol from ColorSchemes.jl e.g. :viridis, or supply a function f: (z, zmin, zmax) -> Int(0-255), or a vector of RGB tuples.\ncolorbar_lim::Tuple = (0, 1) : colorbar limit.\ncolorbar_border::Symbol = :solid : color bar bounding box style (:solid, :bold, :dashed, :dotted, :ascii, :none).\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\nfix_ar::Bool = false : fix terminal aspect ratio (experimental).\n\nAuthor(s)\n\nRowan Katekar (github.com/rjkat)\n\nExamples\n\njulia> heatmap(repeat(collect(0:10)', outer=(11, 1)), zlabel=\"z\")\n      ┌───────────┐  10   \n   11 │▄▄▄▄▄▄▄▄▄▄▄│ ┌──┐  \n      │▄▄▄▄▄▄▄▄▄▄▄│ │▄▄│  \n      │▄▄▄▄▄▄▄▄▄▄▄│ │▄▄│  \n      │▄▄▄▄▄▄▄▄▄▄▄│ │▄▄│ z\n      │▄▄▄▄▄▄▄▄▄▄▄│ │▄▄│  \n    1 │▄▄▄▄▄▄▄▄▄▄▄│ └──┘  \n      └───────────┘  0    \n       1        11        \n\nSee also\n\nPlot, HeatmapCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.histogram-Tuple{AbstractArray}","page":"API","title":"UnicodePlots.histogram","text":"histogram(data; kw...)\n\nDescription\n\nDraws a horizontal or vertical histogram of the given data, fitted to an Histogram.\n\nUsage\n\nhistogram(x; nbins, closed = :left, vertical = false, stats = true, border = :barplot, color = :green, title = \"\", xlabel = \"\", ylabel = \"\", compact = false, blend = true, margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, symbols = ['■'], name = \"\")\n\nArguments\n\nx : array of numbers for which the histogram should be computed.\nnbins : approximate number of bins that should be used.\nclosed : if :left (default), the bin intervals are left-closed a b); if :right, intervals are right-closed (a b.\nvertical : vertical histogram instead of the default horizontal one.\nstats : display statistics (vertical only).\nsymbols::Array = ['■'] : collection of characters used to render the bars.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nIain Dunning (github.com/IainNZ)\nChristof Stocker (github.com/Evizero)\nKenta Sato (github.com/bicycle1885)\n\nExamples\n\njulia> histogram(randn(1_000) * .1, closed=:right, nbins=15)\n                  ┌                                        ┐ \n   (-0.3 , -0.25] ┤▎ 1                                       \n   (-0.25, -0.2 ] ┤██▉ 17                                    \n   (-0.2 , -0.15] ┤█████████▍ 53                             \n   (-0.15, -0.1 ] ┤████████████████▎ 92                      \n   (-0.1 , -0.05] ┤████████████████████████▋ 141             \n   (-0.05,  0.0 ] ┤███████████████████████████████████  200  \n   ( 0.0 ,  0.05] ┤█████████████████████████████████▋ 192    \n   ( 0.05,  0.1 ] ┤█████████████████████████▏ 143            \n   ( 0.1 ,  0.15] ┤████████████████▎ 92                      \n   ( 0.15,  0.2 ] ┤███████▊ 45                               \n   ( 0.2 ,  0.25] ┤██▋ 15                                    \n   ( 0.25,  0.3 ] ┤█▍ 8                                      \n   ( 0.3 ,  0.35] ┤▎ 1                                       \n                  └                                        ┘ \n                                   Frequency                \njulia> histogram(randn(100_000) .* .1, nbins=60, vertical=true, height=10)\n         ┌                                             ┐ \n   8_093  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▃█▇▃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▅████▆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▇██████▅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▅████████▄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▃██████████▃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▂████████████▂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▂██████████████▃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▁████████████████▃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀▁▅██████████████████▅▁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  \n       0  ⠀⠀⠀⠀⠀⠀▁▁▂▃▅██████████████████████▆▃▂▁▁⠀⠀⠀⠀⠀⠀⠀  \n         └                                             ┘ \n         ⠀-0.44⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀0.46⠀ \n         ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀μ ± σ: 0.0 ± 0.1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n\nSee also\n\nPlot, barplot, BarplotGraphics\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.hline!","page":"API","title":"UnicodePlots.hline!","text":"hline!(plot::Plot{<:Canvas}, y::Number, x::Union{AbstractVector{<:Number},Nothing} = nothing; kw...)\n\nDraws an horizontal line at position y (and optional x values).\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.hline!-2","page":"API","title":"UnicodePlots.hline!","text":"hline!(plot::Plot{<:Canvas}, y::AbstractVector{<:Number}, x::Union{AbstractVector{<:Number},Nothing} = nothing; kw...)\n\nDraws horizontal lines at positions given in y (and optional x values).\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.horizontal_histogram-Tuple{StatsBase.Histogram}","page":"API","title":"UnicodePlots.horizontal_histogram","text":"horizontal_histogram(hist; kw...)\n\nDescription\n\nDraws a horizontal histogram of the given StatsBase.Histogram.\n\nNote internally that horizontal_histogram is a simply wrapper for barplot, which means that it supports the same keyword arguments.\n\nUsage\n\nhorizontal_histogram(hist; border = :barplot, color = :green, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, width = 40, compact = false, blend = true, xlim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, symbols = ['■'], name = \"\")\n\nArguments\n\nhist : a fitted StatsBase.Histogram that should be plotted.\nsymbols::Array = ['■'] : collection of characters used to render the bars.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.imageplot-Tuple","page":"API","title":"UnicodePlots.imageplot","text":"imageplot(img; kw...)\n\nPlot an image using ImageInTerminal (sixels are supported if the terminal emulator supports them).\n\nUsage\n\nimageplot(img; title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\nimg : AbstractArray{<:Colorant} to be displayed.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> using ImageInTerminal  # mandatory\njulia> using TestImages\njulia> imageplot(testimage(\"monarch_color_256\"), title=\"monarch\")\n                  monarch               \n    ┌                                 ┐ \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀  \n    └                                 ┘ \n\nSee also\n\nPlot\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.isosurface!-Tuple{Plot{<:Canvas}, AbstractVector, AbstractVector, AbstractVector, AbstractArray}","page":"API","title":"UnicodePlots.isosurface!","text":"isosurface(x, y, z, V; kw...)\nisosurface!(p, args...; kw...)\n\nExtract and plot an isosurface from volumetric data, or a given implicit function.\n\nUsage\n\nisosurface(x, y, z, V; isovalue = 0, centroid = true, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", height = 15, width = 40, border = :solid, compact = false, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, colorbar = false, colorbar_border = :solid, colorbar_lim = (0, 1), colormap = :viridis, yflip = false, xflip = false, projection = :orthographic, elevation = 35.264389682754654, azimuth = 45.0, axes3d = true, zoom = 1.0, up = :z, zlim = (0, 0))\n\nArguments\n\nV : Array (volume) of interest for which a surface is extracted, or Function evaluated as f(x, y, z).\nisovalue : chosen surface isovalue.\ncull : cull (hide) back faces.\nlegacy : use the legacy Marching Cubes algorithm instead of the topology enhanced algorithm.\ncentroid : display triangulation centroid instead of triangle vertices.\nx : horizontal position for each point.\ny : vertical position for each point.\nz : depth position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nzlabel::String = \"\" : text displayed on the z axis (colorbar) of the plot.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nzlim::Tuple = (0, 0) : colormap scaled data range.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncolorbar::Bool = false : toggle the colorbar.\ncolormap::Symbol = :viridis : choose a symbol from ColorSchemes.jl e.g. :viridis, or supply a function f: (z, zmin, zmax) -> Int(0-255), or a vector of RGB tuples.\ncolorbar_lim::Tuple = (0, 1) : colorbar limit.\ncolorbar_border::Symbol = :solid : color bar bounding box style (:solid, :bold, :dashed, :dotted, :ascii, :none).\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nprojection::Symbol = :orthographic : projection for 3D plots (:ortho(graphic), :persp(ective), or Model-View-Projection (MVP) matrix).\naxes3d::Bool = true : draw 3d axes (x -> :red, y -> :green, z -> :blue).\nelevation::Float = 35.264389682754654 : elevation angle above or below the floor plane (-90 ≤ θ ≤ 90).\nazimuth::Float = 45.0 : azimutal angle around the up vector (-180° ≤ φ ≤ 180°).\nzoom::Float = 1.0 : zooming factor in 3D.\nup::Symbol = :z : up vector (:x, :y or :z), prefix with m -> - or p -> + to change the sign e.g. :mz for -z axis pointing upwards.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> torus(x, y, z, r = .2, R = .5) = (√(x^2 + y^2) - R)^2 + z^2 - r^2\njulia> isosurface(-1:.1:1, -1:.1:1, -1:.1:1, torus, elevation = 50, zoom = 2, cull = true)\n    ┌────────────────────────────────────────┐ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⢀⠠⢄⢄⠄⠄⡠⡠⠤⡀⡀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠔⠌⠜⠀⠡⠠⠁⠡⠠⠁⠈⠄⠌⠈⠄⠌⠀⠪⠠⠤⡀⡀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⡠⠔⠅⠌⠈⠄⠌⠀⡁⡀⠨⡀⠄⠠⠡⠠⡀⠥⠠⠈⠀⠡⠠⠁⠡⠱⠢⡀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⢀⣜⠃⡁⠄⢊⠈⠄⡰⠐⡀⢂⡞⢈⡰⡨⡂⢆⡁⣱⠔⢁⠘⢀⠠⠁⡑⠠⢈⠘⣲⡀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⡚⠥⠁⡀⠂⢂⠈⠄⡖⡫⠗⠋⠉⠀⠀⠀⠀⠀⠈⠉⠉⠱⢝⠱⠠⠁⡐⠐⢀⠈⢌⢧⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⡟⠤⠁⡀⠂⢂⢈⠄⢮⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⠠⡁⡐⠐⢀⠈⢤⢚⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⢽⠗⠅⡀⠂⢂⢀⠂⢂⠓⡢⡄⣀⠀⠀⠀⠀⠀⢀⡀⢀⢰⠂⡑⠐⡀⡐⠐⠀⠨⢔⡟⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠈⠭⠄⠌⠰⠀⡀⠂⢂⠀⡐⠐⠌⠔⠑⠅⠡⠊⠢⠡⠂⢂⠀⡐⠐⣀⠐⠠⡁⡃⡑⠁⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠈⠨⠅⠄⠌⠀⡆⢀⠐⠐⢀⠐⠐⠀⠄⠂⠂⡀⠂⡂⡀⠂⢂⠀⡂⢐⠔⠈⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠢⢥⢀⡂⡃⠇⠃⡁⡡⠨⡈⡨⠈⠬⠨⠢⢈⢠⠑⠒⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠈⠋⠓⠂⠊⠒⠂⠚⠘⠚⠙⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⣀⠼⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠔⠉⠀⠀⠀⠈⠑⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    └────────────────────────────────────────┘ \n\nSee also\n\nPlot, MVP, surfaceplot, BrailleCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.isosurface-Tuple{AbstractVector, AbstractVector, AbstractVector, Union{Function, AbstractArray}}","page":"API","title":"UnicodePlots.isosurface","text":"isosurface(x, y, z, V; kw...)\nisosurface!(p, args...; kw...)\n\nExtract and plot an isosurface from volumetric data, or a given implicit function.\n\nUsage\n\nisosurface(x, y, z, V; isovalue = 0, centroid = true, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", height = 15, width = 40, border = :solid, compact = false, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, colorbar = false, colorbar_border = :solid, colorbar_lim = (0, 1), colormap = :viridis, yflip = false, xflip = false, projection = :orthographic, elevation = 35.264389682754654, azimuth = 45.0, axes3d = true, zoom = 1.0, up = :z, zlim = (0, 0))\n\nArguments\n\nV : Array (volume) of interest for which a surface is extracted, or Function evaluated as f(x, y, z).\nisovalue : chosen surface isovalue.\ncull : cull (hide) back faces.\nlegacy : use the legacy Marching Cubes algorithm instead of the topology enhanced algorithm.\ncentroid : display triangulation centroid instead of triangle vertices.\nx : horizontal position for each point.\ny : vertical position for each point.\nz : depth position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nzlabel::String = \"\" : text displayed on the z axis (colorbar) of the plot.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nzlim::Tuple = (0, 0) : colormap scaled data range.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncolorbar::Bool = false : toggle the colorbar.\ncolormap::Symbol = :viridis : choose a symbol from ColorSchemes.jl e.g. :viridis, or supply a function f: (z, zmin, zmax) -> Int(0-255), or a vector of RGB tuples.\ncolorbar_lim::Tuple = (0, 1) : colorbar limit.\ncolorbar_border::Symbol = :solid : color bar bounding box style (:solid, :bold, :dashed, :dotted, :ascii, :none).\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nprojection::Symbol = :orthographic : projection for 3D plots (:ortho(graphic), :persp(ective), or Model-View-Projection (MVP) matrix).\naxes3d::Bool = true : draw 3d axes (x -> :red, y -> :green, z -> :blue).\nelevation::Float = 35.264389682754654 : elevation angle above or below the floor plane (-90 ≤ θ ≤ 90).\nazimuth::Float = 45.0 : azimutal angle around the up vector (-180° ≤ φ ≤ 180°).\nzoom::Float = 1.0 : zooming factor in 3D.\nup::Symbol = :z : up vector (:x, :y or :z), prefix with m -> - or p -> + to change the sign e.g. :mz for -z axis pointing upwards.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> torus(x, y, z, r = .2, R = .5) = (√(x^2 + y^2) - R)^2 + z^2 - r^2\njulia> isosurface(-1:.1:1, -1:.1:1, -1:.1:1, torus, elevation = 50, zoom = 2, cull = true)\n    ┌────────────────────────────────────────┐ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⢀⠠⢄⢄⠄⠄⡠⡠⠤⡀⡀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠔⠌⠜⠀⠡⠠⠁⠡⠠⠁⠈⠄⠌⠈⠄⠌⠀⠪⠠⠤⡀⡀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⡠⠔⠅⠌⠈⠄⠌⠀⡁⡀⠨⡀⠄⠠⠡⠠⡀⠥⠠⠈⠀⠡⠠⠁⠡⠱⠢⡀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⢀⣜⠃⡁⠄⢊⠈⠄⡰⠐⡀⢂⡞⢈⡰⡨⡂⢆⡁⣱⠔⢁⠘⢀⠠⠁⡑⠠⢈⠘⣲⡀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⡚⠥⠁⡀⠂⢂⠈⠄⡖⡫⠗⠋⠉⠀⠀⠀⠀⠀⠈⠉⠉⠱⢝⠱⠠⠁⡐⠐⢀⠈⢌⢧⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⡟⠤⠁⡀⠂⢂⢈⠄⢮⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⠠⡁⡐⠐⢀⠈⢤⢚⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⢽⠗⠅⡀⠂⢂⢀⠂⢂⠓⡢⡄⣀⠀⠀⠀⠀⠀⢀⡀⢀⢰⠂⡑⠐⡀⡐⠐⠀⠨⢔⡟⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠈⠭⠄⠌⠰⠀⡀⠂⢂⠀⡐⠐⠌⠔⠑⠅⠡⠊⠢⠡⠂⢂⠀⡐⠐⣀⠐⠠⡁⡃⡑⠁⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠈⠨⠅⠄⠌⠀⡆⢀⠐⠐⢀⠐⠐⠀⠄⠂⠂⡀⠂⡂⡀⠂⢂⠀⡂⢐⠔⠈⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠢⢥⢀⡂⡃⠇⠃⡁⡡⠨⡈⡨⠈⠬⠨⠢⢈⢠⠑⠒⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠈⠋⠓⠂⠊⠒⠂⠚⠘⠚⠙⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠀⠀⣀⠼⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    │⠔⠉⠀⠀⠀⠈⠑⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n    └────────────────────────────────────────┘ \n\nSee also\n\nPlot, MVP, surfaceplot, BrailleCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.keywords","page":"API","title":"UnicodePlots.keywords","text":"keywords([extra]; default = DEFAULT_KW, add = (), exclude = DEFAULT_EXCLUDED, remove = ())\n\nAdds default keywords to a function signature, in a docstring.\n\nArguments\n\nextra::NamedTuple: add extra keywords in the form keyword = value.\ndefault::Tuple: default UnicodePlots keywords.\nadd::Tuple: add extra symbols, not listed in default but present in KEYWORDS.\nremove::Tuple: remove symbols from default.\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.label!-Tuple{Plot, Symbol, AbstractString, Union{Nothing, Crayons.Crayon, Integer, Symbol, Tuple{Integer, Integer, Integer}}}","page":"API","title":"UnicodePlots.label!","text":"label!(plot, where, value, [color])\n\nlabel!(plot, where, row, value, [color])\n\nThis method is responsible for the setting all the textual decorations of a plot.\n\nNote that where can be any of: :tl (top-left), :t (top-center), :tr (top-right), :bl (bottom-left), :b (bottom-center), :br (bottom-right), :l (left), :r (right).\n\nIf where is either :l, or :r, then row can be between 1 and the number of character rows of the plots canvas.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.lineplot","page":"API","title":"UnicodePlots.lineplot","text":"lineplot(; kw...)\nlineplot(y; kw...)\nlineplot(x, y; kw...)\nlineplot!(p, args...; kw...)\n\nDescription\n\nDraws a path through the given points on a new canvas.\n\nThe first (optional) vector x should contain the horizontal positions for all the points along the path. The second vector y should then contain the corresponding vertical positions respectively. This means that the two vectors must be of the same length and ordering.\n\nUsage\n\nlineplot([x], y; head_tail = nothing, head_tail_frac = 0.05, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\nlineplot([start], [stop], fun; kw...)\n\nArguments\n\nfun : a unary function f R - R that should be evaluated, and drawn as a path from start to stop (numbers in the domain).\nhead_tail : color the line head and/or tail with the complement of the chosen color (:head, :tail, :both).\nhead_tail_frac : fraction of the arrow head or tail (e.g. provide 0.1 for 10%).\nx : horizontal position for each point (can be a real number or of type TimeType), if omitted, the axes of y will be used as x.\nformat : specify the ticks date format (TimeType only).\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\nMilktrader (github.com/milktrader)\n\nExamples\n\njulia> lineplot([1, 2, 7], [9, -6, 8]; title = \"My Lineplot\")\n       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My Lineplot⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n       ┌────────────────────────────────────────┐ \n    10 │⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠│ \n       │⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠤⠊⠁⠀│ \n       │⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠁⠀⠀⠀⠀│ \n       │⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠤⠤⠤⠼⡤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢤⠤⠶⠥⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│ \n       │⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠤⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⡠⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⢇⡠⠔⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   -10 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       └────────────────────────────────────────┘ \n       ⠀1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀7⠀ \n\nSee also\n\nPlot, scatterplot, stairs, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.lineplot!","page":"API","title":"UnicodePlots.lineplot!","text":"lineplot(; kw...)\nlineplot(y; kw...)\nlineplot(x, y; kw...)\nlineplot!(p, args...; kw...)\n\nDescription\n\nDraws a path through the given points on a new canvas.\n\nThe first (optional) vector x should contain the horizontal positions for all the points along the path. The second vector y should then contain the corresponding vertical positions respectively. This means that the two vectors must be of the same length and ordering.\n\nUsage\n\nlineplot([x], y; head_tail = nothing, head_tail_frac = 0.05, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\nlineplot([start], [stop], fun; kw...)\n\nArguments\n\nfun : a unary function f R - R that should be evaluated, and drawn as a path from start to stop (numbers in the domain).\nhead_tail : color the line head and/or tail with the complement of the chosen color (:head, :tail, :both).\nhead_tail_frac : fraction of the arrow head or tail (e.g. provide 0.1 for 10%).\nx : horizontal position for each point (can be a real number or of type TimeType), if omitted, the axes of y will be used as x.\nformat : specify the ticks date format (TimeType only).\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\nMilktrader (github.com/milktrader)\n\nExamples\n\njulia> lineplot([1, 2, 7], [9, -6, 8]; title = \"My Lineplot\")\n       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My Lineplot⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n       ┌────────────────────────────────────────┐ \n    10 │⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠│ \n       │⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠤⠊⠁⠀│ \n       │⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠁⠀⠀⠀⠀│ \n       │⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠤⠤⠤⠼⡤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢤⠤⠶⠥⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│ \n       │⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠤⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⡠⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⢇⡠⠔⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   -10 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       └────────────────────────────────────────┘ \n       ⠀1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀7⠀ \n\nSee also\n\nPlot, scatterplot, stairs, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.lookat","page":"API","title":"UnicodePlots.lookat","text":"lookat(eye, target, up_vector)\n\nDescription\n\nComputes the scene camera (see songho.ca/opengl/gl_camera.html).\n\nArguments\n\n- `eye`: position of the camera in world space (e.g. [0, 0, 10]).\n- `target`: target point to look at in world space (usually to origin = [0, 0, 0]).\n- `up_vector`: up vector (usually +z = [0, 0, 1]).\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.ortho-NTuple{6, Any}","page":"API","title":"UnicodePlots.ortho","text":"ortho(l, r, b, t, n, f)\n\nDescription\n\nComputes the orthographic projection matrix (see songho.ca/opengl/gl_projectionmatrix.html#ortho).\n\nArguments\n\n- `l`: left coordinate of the vertical clipping plane.\n- `r`: right coordinate of the vertical clipping plane.\n- `b`: bottom coordinate of the horizontal clipping plane.\n- `t`: top coordinate of the horizontal clipping plane.\n- `n`: distance to the near depth clipping plane.\n- `f`: distance to the far depth clipping plane.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.pixel_size-Tuple{Canvas}","page":"API","title":"UnicodePlots.pixel_size","text":"pixel_size(c::Canvas)\n\nCanvas pixel resolution (height, width).\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.png_image-Tuple{Plot}","page":"API","title":"UnicodePlots.png_image","text":"png_image(p::Plot, font = nothing, pixelsize = 32, transparent = true, foreground = nothing, background = nothing, bounding_box = nothing, bounding_box_glyph = nothing)\n\nRenders a png image.\n\nArguments\n\npixelsize::Integer = 32: controls the image size scaling.\nfont::Union{Nothing,AbstractString} = nothing: select a font by name, or fall-back to a system font.\ntransparent::Bool = true: use a transparent background.\nforeground::UserColorType = nothing: choose a foreground color for un-colored text.\nbackground::UserColorType = nothing: choose a background color for the rendered image.\nbounding_box::UserColorType = nothing: debugging bounding box color.\nbounding_box_glyph::UserColorType = nothing: debugging glyph bounding box color.\nrow_fact::Union{Nothing,Real} = nothing: row spacing multiplier (e.g. for histogram).\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.polarplot!-Tuple{Plot{<:Canvas}, AbstractVector, AbstractVector}","page":"API","title":"UnicodePlots.polarplot!","text":"polarplot(θ, r; kw...)\npolarplot!(p, args...; kw...)\n\nDraws θ angles and r radii on a polar plot.\n\nUsage\n\npolarplot(θ, r; canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\nθ : angles values (radians).\nr : radii, or Function evaluated as r(θ).\nrlim : plotting range for the r axis ((0, 0) stands for automatic).\ndegrees : label angles using degrees.\nnum_rad_lab : number of radius labels.\nang_rad_lab : angle where the radius labels are drawn.\nscatter : use scatter instead of lines.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> polarplot(range(0, 2π; length = 20), range(0, 2; length = 20))\n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀90°⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠤⠒⠒⠉⠉⠉⠉⠉⡏⠉⠉⠉⠉⠓⠒⠦⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⢀⡤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠒⠤⡀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⡠⠞⠓⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠜2⢄⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⣠⠊⠀⠀⠀⠀⠉⠢⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠊⠁⠀⠀⠀⠱⣄⠀⠀⠀   \n        ⠀⠀⡴⠁⠀⠀⠀⠀⠀⠀⠀⠀⠑⠤⡀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀1⠔⠁⠀⠀⠀⠀⠀⠀⠀⠈⢦⠀⠀   \n        ⠀⡸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣈⠶⢖⠒⠒⠒⠢⣇⡀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣇⠀   \n        ⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠉⠢⣀⠀⡇⢣⡠⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀   \n   180° ⠀⡧⠤⠤⠤⠤⠤⠤⠤⠤⢤⠧⠤⠤⠤⠤⠤⠤⠤⠤⡵0⡭⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢼⠀ 0°\n        ⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⡇⠈⠒⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢿⠀   \n        ⠀⢱⡀⠀⠀⠀⠀⠀⠀⠀⠸⡀⠀⠀⢀⡠⠊⠁⠀⠀⠀⡇⠀⠀⠀⠉⠢⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢎⡏⠀   \n        ⠀⠀⠳⡀⠀⠀⠀⠀⠀⠀⠀⠱⡠⠔⠁⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠑⠤⡀⠀⠀⠀⠀⠀⢀⠔⢁⠞⠀⠀   \n        ⠀⠀⠀⠙⢄⠀⠀⠀⠀⢀⠔⠊⠈⠢⣀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⠒⢄⢀⡠⠔⠁⡰⠋⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠑⢦⡠⠊⠁⠀⠀⠀⠀⠀⠉⠒⠢⢄⣀⠀⡇⠀⠀⠀⠀⠀⢀⣀⣀⡠⠔⠊⠉⢢⡤⠊⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠈⠓⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⡏⠉⠉⠉⠉⠉⠁⠀⠀⠀⣀⠤⠒⠁⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠒⠤⠤⣀⣀⣀⣀⣀⣇⣀⣀⣀⣀⡤⠤⠖⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀270°⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n\nSee also\n\nPlot, lineplot, BrailleCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.polarplot-Tuple{AbstractVector, Union{Function, AbstractVector}}","page":"API","title":"UnicodePlots.polarplot","text":"polarplot(θ, r; kw...)\npolarplot!(p, args...; kw...)\n\nDraws θ angles and r radii on a polar plot.\n\nUsage\n\npolarplot(θ, r; canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\nθ : angles values (radians).\nr : radii, or Function evaluated as r(θ).\nrlim : plotting range for the r axis ((0, 0) stands for automatic).\ndegrees : label angles using degrees.\nnum_rad_lab : number of radius labels.\nang_rad_lab : angle where the radius labels are drawn.\nscatter : use scatter instead of lines.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> polarplot(range(0, 2π; length = 20), range(0, 2; length = 20))\n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀90°⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠤⠒⠒⠉⠉⠉⠉⠉⡏⠉⠉⠉⠉⠓⠒⠦⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⢀⡤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠒⠤⡀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⡠⠞⠓⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠜2⢄⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⣠⠊⠀⠀⠀⠀⠉⠢⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠊⠁⠀⠀⠀⠱⣄⠀⠀⠀   \n        ⠀⠀⡴⠁⠀⠀⠀⠀⠀⠀⠀⠀⠑⠤⡀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀1⠔⠁⠀⠀⠀⠀⠀⠀⠀⠈⢦⠀⠀   \n        ⠀⡸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣈⠶⢖⠒⠒⠒⠢⣇⡀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣇⠀   \n        ⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠉⠢⣀⠀⡇⢣⡠⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀   \n   180° ⠀⡧⠤⠤⠤⠤⠤⠤⠤⠤⢤⠧⠤⠤⠤⠤⠤⠤⠤⠤⡵0⡭⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢼⠀ 0°\n        ⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⡇⠈⠒⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢿⠀   \n        ⠀⢱⡀⠀⠀⠀⠀⠀⠀⠀⠸⡀⠀⠀⢀⡠⠊⠁⠀⠀⠀⡇⠀⠀⠀⠉⠢⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢎⡏⠀   \n        ⠀⠀⠳⡀⠀⠀⠀⠀⠀⠀⠀⠱⡠⠔⠁⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠑⠤⡀⠀⠀⠀⠀⠀⢀⠔⢁⠞⠀⠀   \n        ⠀⠀⠀⠙⢄⠀⠀⠀⠀⢀⠔⠊⠈⠢⣀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⠒⢄⢀⡠⠔⠁⡰⠋⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠑⢦⡠⠊⠁⠀⠀⠀⠀⠀⠉⠒⠢⢄⣀⠀⡇⠀⠀⠀⠀⠀⢀⣀⣀⡠⠔⠊⠉⢢⡤⠊⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠈⠓⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⡏⠉⠉⠉⠉⠉⠁⠀⠀⠀⣀⠤⠒⠁⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠒⠤⠤⣀⣀⣀⣀⣀⣇⣀⣀⣀⣀⡤⠤⠖⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀270°⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   \n\nSee also\n\nPlot, lineplot, BrailleCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.preprocess!-Tuple{IO, GraphicsArea}","page":"API","title":"UnicodePlots.preprocess!","text":"preprocess!(c::GraphicsArea)\n\nOptional step: pre-process canvas before printing rows (e.g. for costly computations). Returns a callback for optional cleanup after printing.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.savefig-Tuple{Plot, AbstractString}","page":"API","title":"UnicodePlots.savefig","text":"savefig(p, filename; color = false, kw...)\n\nSave the given plot to a txt orpng` file.\n\nArguments - txt\n\ncolor::Bool = false: output the ANSI color codes to the file.\n\nArguments - png\n\nsee help?> UnicodePlots.png_image\n\nExamples\n\njulia> savefig(lineplot([0, 1]), \"foo.txt\")\njulia> savefig(lineplot([0, 1]), \"foo.png\"; font = \"JuliaMono\", pixelsize = 32, transparent = false)\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.scatterplot","page":"API","title":"UnicodePlots.scatterplot","text":"scatterplot(; kw...)\nscatterplot(y; kw...)\nscatterplot(x, y; kw...)\nscatterplot!(p, args...; kw...)\n\nDescription\n\nDraws the given points on a new canvas.\n\nThe first (optional) vector x should contain the horizontal positions for all the points. The second vector y should then contain the corresponding vertical positions respectively. This means that the two vectors must be of same length and ordering.\n\nUsage\n\nscatterplot([x], y; canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\nmarker : choose a marker from (:circle, :rect, :diamond, :hexagon, :cross, :xcross, :utriangle, :dtriangle, :rtriangle, :ltriangle, :pentagon, :star4, :star5, :star6, :star8, :vline, :hline, :+, :x), a Char, a unit length String or a Vector of these.\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\n\nExamples\n\njulia> scatterplot(randn(50), randn(50), title = \"My Scatterplot\")\n      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My Scatterplot⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n      ┌────────────────────────────────────────┐ \n    3 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠠⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠠⠀⠀⠂⡀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀│ \n      │⠈⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠌⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⡇⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⡀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⡀⡏⠀⠉⠀⠀⠂⠀⠠⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠤⠤⠤⠤⠤⠤⠤⠴⠤⢤⠤⠤⠤⠤⠤⠤⠬⠤⢤⠤⡧⠤⢤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠂⠀⠀⡇⠀⠀⠀⠂⠠⡀⠀⡀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠈⠀⠀⡇⠀⠀⠀⠀⠈⠀⠀⠀⠁⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⡇⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   -3 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      └────────────────────────────────────────┘ \n      ⠀-2⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀2⠀ \n\nSee also\n\nPlot, lineplot, stairs, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.scatterplot!","page":"API","title":"UnicodePlots.scatterplot!","text":"scatterplot(; kw...)\nscatterplot(y; kw...)\nscatterplot(x, y; kw...)\nscatterplot!(p, args...; kw...)\n\nDescription\n\nDraws the given points on a new canvas.\n\nThe first (optional) vector x should contain the horizontal positions for all the points. The second vector y should then contain the corresponding vertical positions respectively. This means that the two vectors must be of same length and ordering.\n\nUsage\n\nscatterplot([x], y; canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\nmarker : choose a marker from (:circle, :rect, :diamond, :hexagon, :cross, :xcross, :utriangle, :dtriangle, :rtriangle, :ltriangle, :pentagon, :star4, :star5, :star6, :star8, :vline, :hline, :+, :x), a Char, a unit length String or a Vector of these.\ncolor::Symbol = :auto : Vector of colors, or scalar - choose from (:green, :blue, :red, :yellow, :cyan, :magenta, :white, :normal, :auto), use an integer in [0-255], or provide 3 integers as RGB components.\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\n\nExamples\n\njulia> scatterplot(randn(50), randn(50), title = \"My Scatterplot\")\n      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My Scatterplot⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n      ┌────────────────────────────────────────┐ \n    3 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠠⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠠⠀⠀⠂⡀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀│ \n      │⠈⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠌⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⡇⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⡀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⡀⡏⠀⠉⠀⠀⠂⠀⠠⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠤⠤⠤⠤⠤⠤⠤⠴⠤⢤⠤⠤⠤⠤⠤⠤⠬⠤⢤⠤⡧⠤⢤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠂⠀⠀⡇⠀⠀⠀⠂⠠⡀⠀⡀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠈⠀⠀⡇⠀⠀⠀⠀⠈⠀⠀⠀⠁⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⡇⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   -3 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n      └────────────────────────────────────────┘ \n      ⠀-2⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀2⠀ \n\nSee also\n\nPlot, lineplot, stairs, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.spy-Tuple{AbstractMatrix}","page":"API","title":"UnicodePlots.spy","text":"spy(A; kw...)\n\nDescription\n\nPlots the sparsity pattern for the given matrix A. This means that a scatterplot that resembles the matrix is drawn, in which only the pixel for non-zero elements of the matrix are set.\n\nIf the parameters width and height are not explicitly specified, then the function will attempt to preserve the aspect ratio of the matrix, while also attempting to fit the resulting plot within the bounding box specified by maxwidth and maxheight.\n\nUsage\n\nspy(A; maxwidth = 0, maxheight = 0, zeros = false, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\", fix_ar = false)\n\nArguments\n\nA : matrix of interest for which non-zero elements should be drawn.\nmaxheight : maximum number of character rows that should be used for plotting.\nmaxwidth : maximum number of characters per row that should be used for plotting.\nheight::Int = 15 : exact number of character rows that should be used for plotting (0 stands for automatic).\nwidth::Int = 40 : exact number of characters per row that should be used for plotting (0 stands for automatic).\nshow_zeros : show zeros pattern instead of default nonzeros.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\nfix_ar::Bool = false : fix terminal aspect ratio (experimental).\n\nAuthor(s)\n\nDominique Orban (github.com/dpo)\nChristof Stocker (github.com/Evizero)\nJake Bolewski (github.com/jakebolewski)\n\nExamples\n\njulia> using SparseArrays\njulia> spy(sprandn(50, 120, .05))\n      ┌────────────────────────────────────────────────────────────┐    \n    1 │⡀⠨⠂⠀⠠⠀⠠⠀⠀⠀⠂⠀⡀⠂⠀⠀⠰⠈⠈⠂⡀⠀⠀⠀⠀⠐⠀⡀⡀⠀⠀⢄⡀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢄⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠐⠴⠄│ > 0\n      │⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠠⠄⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢀⠀⡀⠀⠄⠘⠀⠀⡀⠀⠀⠀⠂⠠⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀│ < 0\n      │⠂⠀⠀⠀⠐⠐⠀⠂⠀⡀⠐⢀⠀⠀⠀⠀⡀⠀⠈⠀⠄⠀⠀⠨⠀⠀⠀⠀⠀⠠⠀⢀⠀⠀⠉⠐⠄⠄⠀⠔⠀⠀⠂⠀⢐⠀⠀⠀⡀⠘⢀⠀⠁⠄⠀⠠⠀⠄⠀⠄│    \n      │⠀⢀⠀⠀⠀⠀⠀⠠⠀⠂⠀⠄⠀⠘⠈⠌⢀⠀⠀⠀⠐⠀⠁⠀⠀⠀⢀⠀⠀⠠⠀⠁⠄⠀⠀⠀⠂⢀⠀⠀⠀⠀⢀⡁⠀⠀⠂⠠⠀⠀⠀⠀⠀⠊⠁⠀⠀⠀⠀⠄│    \n      │⠀⠅⠀⠀⠀⠀⢄⠈⠄⠠⠈⠀⠀⠀⠀⡀⠀⢀⠠⠀⠀⠀⠁⠀⠀⡀⠃⠀⠀⠈⠈⠁⠀⠁⠠⢀⠀⢁⠀⠀⢀⠀⠀⠀⢀⠀⠠⠂⠀⠁⢁⠀⠂⠀⠀⠆⠌⠀⠀⠀│    \n      │⠀⠀⠔⠀⠀⠀⠀⢀⠀⠁⢀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⡀⠀⠀⠀⡀⠀⠈⠀⠀⠀⡁⠁⠀⠀⠀⠠⠀⠀⠀⠄⡀⠀⠀⠀⠊⠀⠀⠄⠀⠀⠀⠀⠀⠀⠠⠀⠀⠄⠀│    \n      │⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠅⠄⡀⠀⠀⢂⠂⠄⠑⠀⠀⠀⢄⠀⠀⠠⠂⠁⡀⠀⢠⠈⠀⠂⠀⠀⠄⠀⠀⠀⠄⠀⠀⠃⠂⠀⠄⢀⠀⠀⠀⠀⠀⠀⠀│    \n      │⠀⠐⠀⠀⠂⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠌⠀⠂⠀⠀⠀⠀⡀⢁⠁⠨⠀⠀⠀⠂⠀⠀⠨⠀⠁⠀⠀⠀⠀⠀⠊⠀⠄⠀⠀⠁⠐⠠⠀⢀⠀⠀⠀⠈⠀⠀⠁⠐⠄⠄│    \n      │⢉⠀⢀⠁⠀⠀⠀⠀⠈⠀⠀⠀⠀⠁⠀⠠⠀⠀⠁⠀⠀⠀⡠⠁⠀⠀⠀⠀⠉⠠⡀⠀⠀⠀⢀⡀⠄⠀⠀⠀⠄⠀⠀⠈⠄⠀⠑⠀⠀⠀⠀⠀⠀⠠⠀⡀⡀⠀⠀⠀│    \n      │⠅⠈⠈⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⡄⠀⠀⠄⠀⠀⠠⠀⠀⠠⠈⠀⠂⠢⠈⠀⠀⠀⠄⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⢀⠤⠀⠀⠀⠀│    \n      │⠀⠀⠀⠂⠁⠀⠀⠀⠀⠁⠀⠘⠀⠂⢠⠀⠀⠀⠀⠀⢃⠀⠐⠈⠄⠐⠀⠀⠀⢀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⡀⠀⡀⠀⠀⠁⠀⠁⠀⠁⠠⠔⠀⢁⡀│    \n   50 │⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠈⠀⠂⠠⠀⠀⠀⠖⠀⠀⠀⠈⠀⠀⠀⠀⠀⡀⠠⠀⢀⠀⠅⠀⠀⠐⠀⠀⠀⠀⠠⠀⠠⠀⠀⢀⠀│    \n      └────────────────────────────────────────────────────────────┘    \n      ⠀1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀120⠀    \n      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀315 ≠ 0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀    \n\nSee also\n\nPlot, scatterplot, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.stairs!-Tuple{Plot{<:Canvas}, AbstractVector, AbstractVector}","page":"API","title":"UnicodePlots.stairs!","text":"stairs(x, y; kw...)\nstairs!(p, args...; kw...)\n\nDescription\n\nDraws a staircase plot on a new canvas.\n\nThe first (optional) vector x should contain the horizontal positions for all the points. The second vector y should then contain the corresponding vertical positions respectively. This means that the two vectors must be of same length and ordering.\n\nUsage\n\nstairs(x, y; style = :post, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\nstyle : specifies where the transition of the stair takes place (can be either :pre or :post).\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\nDominique (github.com/dpo)\n\nExamples\n\njulia> stairs([1, 2, 4, 7, 8], [1, 3, 4, 2, 7], style = :post, title = \"My Staircase Plot\")\n     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My Staircase Plot⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n     ┌────────────────────────────────────────┐ \n   7 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⡄⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⢸⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠧⠤⠤⠤⠤⠼│ \n     │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   1 │⣀⣀⣀⣀⣀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n     └────────────────────────────────────────┘ \n     ⠀1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀8⠀ \n\nSee also\n\nPlot, scatterplot, lineplot, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.stairs-Tuple{AbstractVector, AbstractVector}","page":"API","title":"UnicodePlots.stairs","text":"stairs(x, y; kw...)\nstairs!(p, args...; kw...)\n\nDescription\n\nDraws a staircase plot on a new canvas.\n\nThe first (optional) vector x should contain the horizontal positions for all the points. The second vector y should then contain the corresponding vertical positions respectively. This means that the two vectors must be of same length and ordering.\n\nUsage\n\nstairs(x, y; style = :post, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", xscale = :identity, yscale = :identity, height = 15, width = 40, border = :solid, compact = false, blend = true, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, grid = true, yflip = false, xflip = false, name = \"\")\n\nArguments\n\nstyle : specifies where the transition of the stair takes place (can be either :pre or :post).\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\nAuthor(s)\n\nChristof Stocker (github.com/Evizero)\nDominique (github.com/dpo)\n\nExamples\n\njulia> stairs([1, 2, 4, 7, 8], [1, 3, 4, 2, 7], style = :post, title = \"My Staircase Plot\")\n     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀My Staircase Plot⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n     ┌────────────────────────────────────────┐ \n   7 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⡄⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⢸⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⢸│ \n     │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠧⠤⠤⠤⠤⠼│ \n     │⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   1 │⣀⣀⣀⣀⣀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n     └────────────────────────────────────────┘ \n     ⠀1⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀8⠀ \n\nSee also\n\nPlot, scatterplot, lineplot, BrailleCanvas, BlockCanvas, AsciiCanvas, DotCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.surfaceplot!","page":"API","title":"UnicodePlots.surfaceplot!","text":"surfaceplot(x, y, A; kw...)\nsurfaceplot!(p, args...; kw...)\n\nDraws a 3D surface plot on a new canvas (masking values using NaNs is supported). To plot a slice one can pass an anonymous function which maps to a constant height: zscale = z -> a_constant. By default, zscale = :aspect normalizes heights (z axis) to the x or y axes. The x, y and z axes of the 3D cartesian frame are mapped respectively to the :red, :green and :blue colors.\n\nUsage\n\nsurfaceplot(x, y, A; lines = false, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", height = 15, width = 40, border = :solid, compact = false, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, colorbar = false, colorbar_border = :solid, colorbar_lim = (0, 1), colormap = :viridis, yflip = false, xflip = false, projection = :orthographic, elevation = 35.264389682754654, azimuth = 45.0, axes3d = true, zoom = 1.0, up = :z, name = \"\", zlim = (0, 0))\n\nArguments\n\nA : Matrix of surface heights, or Function evaluated as f(x, y).\nlines : use lineplot instead of scatterplot (for regular increasing data).\nzscale::Symbol = :aspect : scale heights (:identity, :aspect, tuple of (min, max) values, or arbitrary scale function).\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nzlabel::String = \"\" : text displayed on the z axis (colorbar) of the plot.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nzlim::Tuple = (0, 0) : colormap scaled data range.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncolorbar::Bool = false : toggle the colorbar.\ncolormap::Symbol = :viridis : choose a symbol from ColorSchemes.jl e.g. :viridis, or supply a function f: (z, zmin, zmax) -> Int(0-255), or a vector of RGB tuples.\ncolorbar_lim::Tuple = (0, 1) : colorbar limit.\ncolorbar_border::Symbol = :solid : color bar bounding box style (:solid, :bold, :dashed, :dotted, :ascii, :none).\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nprojection::Symbol = :orthographic : projection for 3D plots (:ortho(graphic), :persp(ective), or Model-View-Projection (MVP) matrix).\naxes3d::Bool = true : draw 3d axes (x -> :red, y -> :green, z -> :blue).\nelevation::Float = 35.264389682754654 : elevation angle above or below the floor plane (-90 ≤ θ ≤ 90).\nazimuth::Float = 45.0 : azimutal angle around the up vector (-180° ≤ φ ≤ 180°).\nzoom::Float = 1.0 : zooming factor in 3D.\nup::Symbol = :z : up vector (:x, :y or :z), prefix with m -> - or p -> + to change the sign e.g. :mz for -z axis pointing upwards.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> sombrero(x, y) = 15sinc(√(x^2 + y^2) / π)\njulia> surfaceplot(-8:.5:8, -8:.5:8, sombrero)\n    ┌────────────────────────────────────────┐  15 \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ ┌──┐\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⡃⢝⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠭⠂⠒⠭⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣴⣥⡅⣭⣬⣦⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣖⡻⠝⡪⢒⢵⣥⡫⠇⠼⢝⣬⡮⡒⢕⠫⢟⣲⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⢗⣒⣊⡩⠔⢁⢎⣐⡱⡁⢏⢎⣂⡱⡈⠢⢍⣑⣒⡺⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⣠⣾⡿⠿⣿⣿⣕⣒⣒⣊⣽⣯⡾⠵⠅⠮⠮⢷⣽⣯⣑⣒⣒⣪⣿⣿⠿⢿⣷⣄⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠐⠻⠿⠛⠛⠛⠛⠽⢿⣶⣶⡾⠓⠉⠢⠈⡀⢁⠁⠔⠉⠚⢷⣶⣶⡿⠯⠛⠛⠛⠛⠿⠟⠂⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⣯⣯⣓⢶⣷⡆⣶⣾⡶⣚⣽⣽⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⡳⡻⡃⢟⢟⢞⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⢀⡠⠜⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠪⠆⡵⠕⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠊⠁⠀⠀⠀⠀⠉⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ └──┘\n    └────────────────────────────────────────┘ -3  \n\nSee also\n\nPlot, MVP, lineplot, scatterplot, BrailleCanvas\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.surfaceplot-Tuple{AbstractMatrix}","page":"API","title":"UnicodePlots.surfaceplot","text":"surfaceplot(A; kw...)\n\nUsage\n\nDraws a surface plot of matrix A along axis x and y on a new canvas.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.surfaceplot-Tuple{AbstractVecOrMat, AbstractVecOrMat, Union{Function, AbstractVecOrMat}}","page":"API","title":"UnicodePlots.surfaceplot","text":"surfaceplot(x, y, A; kw...)\nsurfaceplot!(p, args...; kw...)\n\nDraws a 3D surface plot on a new canvas (masking values using NaNs is supported). To plot a slice one can pass an anonymous function which maps to a constant height: zscale = z -> a_constant. By default, zscale = :aspect normalizes heights (z axis) to the x or y axes. The x, y and z axes of the 3D cartesian frame are mapped respectively to the :red, :green and :blue colors.\n\nUsage\n\nsurfaceplot(x, y, A; lines = false, canvas = UnicodePlots.BrailleCanvas, title = \"\", xlabel = \"\", ylabel = \"\", zlabel = \"\", height = 15, width = 40, border = :solid, compact = false, xlim = (0, 0), ylim = (0, 0), margin = 3, padding = 1, labels = true, unicode_exponent = true, colorbar = false, colorbar_border = :solid, colorbar_lim = (0, 1), colormap = :viridis, yflip = false, xflip = false, projection = :orthographic, elevation = 35.264389682754654, azimuth = 45.0, axes3d = true, zoom = 1.0, up = :z, name = \"\", zlim = (0, 0))\n\nArguments\n\nA : Matrix of surface heights, or Function evaluated as f(x, y).\nlines : use lineplot instead of scatterplot (for regular increasing data).\nzscale::Symbol = :aspect : scale heights (:identity, :aspect, tuple of (min, max) values, or arbitrary scale function).\nx : horizontal position for each point.\ny : vertical position for each point.\ntitle::String = \"\" : text displayed on top of the plot.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nzlabel::String = \"\" : text displayed on the z axis (colorbar) of the plot.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nzlim::Tuple = (0, 0) : colormap scaled data range.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ncolorbar::Bool = false : toggle the colorbar.\ncolormap::Symbol = :viridis : choose a symbol from ColorSchemes.jl e.g. :viridis, or supply a function f: (z, zmin, zmax) -> Int(0-255), or a vector of RGB tuples.\ncolorbar_lim::Tuple = (0, 1) : colorbar limit.\ncolorbar_border::Symbol = :solid : color bar bounding box style (:solid, :bold, :dashed, :dotted, :ascii, :none).\ncanvas::UnionAll = UnicodePlots.BrailleCanvas : type of canvas used for drawing.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nprojection::Symbol = :orthographic : projection for 3D plots (:ortho(graphic), :persp(ective), or Model-View-Projection (MVP) matrix).\naxes3d::Bool = true : draw 3d axes (x -> :red, y -> :green, z -> :blue).\nelevation::Float = 35.264389682754654 : elevation angle above or below the floor plane (-90 ≤ θ ≤ 90).\nazimuth::Float = 45.0 : azimutal angle around the up vector (-180° ≤ φ ≤ 180°).\nzoom::Float = 1.0 : zooming factor in 3D.\nup::Symbol = :z : up vector (:x, :y or :z), prefix with m -> - or p -> + to change the sign e.g. :mz for -z axis pointing upwards.\n\nAuthor(s)\n\nT Bltg (github.com/t-bltg)\n\nExamples\n\njulia> sombrero(x, y) = 15sinc(√(x^2 + y^2) / π)\njulia> surfaceplot(-8:.5:8, -8:.5:8, sombrero)\n    ┌────────────────────────────────────────┐  15 \n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ ┌──┐\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⡃⢝⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠭⠂⠒⠭⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣤⣴⣥⡅⣭⣬⣦⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣖⡻⠝⡪⢒⢵⣥⡫⠇⠼⢝⣬⡮⡒⢕⠫⢟⣲⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⢗⣒⣊⡩⠔⢁⢎⣐⡱⡁⢏⢎⣂⡱⡈⠢⢍⣑⣒⡺⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠀⠀⣠⣾⡿⠿⣿⣿⣕⣒⣒⣊⣽⣯⡾⠵⠅⠮⠮⢷⣽⣯⣑⣒⣒⣪⣿⣿⠿⢿⣷⣄⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⠐⠻⠿⠛⠛⠛⠛⠽⢿⣶⣶⡾⠓⠉⠢⠈⡀⢁⠁⠔⠉⠚⢷⣶⣶⡿⠯⠛⠛⠛⠛⠿⠟⠂⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⣯⣯⣓⢶⣷⡆⣶⣾⡶⣚⣽⣽⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⡳⡻⡃⢟⢟⢞⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠀⢀⡠⠜⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠪⠆⡵⠕⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ │▄▄│\n    │⠊⠁⠀⠀⠀⠀⠉⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ └──┘\n    └────────────────────────────────────────┘ -3  \n\nSee also\n\nPlot, MVP, lineplot, scatterplot, BrailleCanvas\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.title!-Tuple{Plot, AbstractString}","page":"API","title":"UnicodePlots.title!","text":"title!(plot, newtitle)\n\nSets a new title for the given plot. Alternatively, the current title can be queried using title.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.title-Tuple{Plot}","page":"API","title":"UnicodePlots.title","text":"title(plot) -> String\n\nReturns the current title of the given plot. Alternatively, the title can be changed with title!.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.validate_input-Tuple{AbstractVector, AbstractVector, AbstractVector}","page":"API","title":"UnicodePlots.validate_input","text":"validate_input(x, y, z = nothing)\n\nDescription\n\nCheck for invalid input (length) and selects only finite input data.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.vertical_histogram-Tuple{StatsBase.Histogram}","page":"API","title":"UnicodePlots.vertical_histogram","text":"vertical_histogram(hist; kw...)\n\nDescription\n\nDraws a vertical histogram of the given StatsBase.Histogram.\n\nUsage\n\nvertical_histogram(hist; border = :barplot, color = :green, title = \"\", xlabel = \"\", ylabel = \"\", compact = false, blend = true, margin = 3, padding = 1, labels = true, unicode_exponent = true, yflip = false, xflip = false, symbols = ['■'], name = \"\")\n\nArguments\n\nhist : a fitted StatsBase.Histogram that should be plotted.\nsymbols::Array = ['■'] : collection of characters used to render the bars.\ntitle::String = \"\" : text displayed on top of the plot.\nname::String = \"\" : current drawing annotation displayed on the right.\nxlabel::String = \"\" : text displayed on the x axis of the plot.\nylabel::String = \"\" : text displayed on the y axis of the plot.\nxscale::Symbol = :identity : x-axis scale (:identity, :ln, :log2, :log10), or scale function e.g. x -> log10(x).\nyscale::Symbol = :identity : y-axis scale.\nlabels::Bool = true : show plot labels.\nborder::Symbol = :solid : plot bounding box style (:corners, :solid, :bold, :dashed, :dotted, :ascii, :none).\nmargin::Int = 3 : number of empty characters to the left of the whole plot.\npadding::Int = 1 : left and right space between the labels and the canvas.\nheight::Int = 15 : number of canvas rows, or :auto.\nwidth::Int = 40 : number of characters per canvas row, or :auto.\nxlim::Tuple = (0, 0) : plotting range for the x axis ((0, 0) stands for automatic).\nylim::Tuple = (0, 0) : plotting range for the y axis.\nxflip::Bool = false : set true to flip the x axis.\nyflip::Bool = false : set true to flip the y axis.\ngrid::Bool = true : draws grid-lines at the origin.\ncompact::Bool = false : compress the plot (compact labels, removes margins and padding).\nunicode_exponent::Bool = true : use Unicode symbols for exponents: e.g. 10²⸱¹ instead of 10^2.1.\nblend::Bool = true : blend colors on the underlying canvas.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.vline!","page":"API","title":"UnicodePlots.vline!","text":"vline!(plot::Plot{<:Canvas}, x::Number, y::Union{AbstractVector{<:Number},Nothing} = nothing; kw...)\n\nDraws a vertical line at position x (and optional y values).\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.vline!-2","page":"API","title":"UnicodePlots.vline!","text":"vline!(plot::Plot{<:Canvas}, x::AbstractVector{<:Number}, y::Union{AbstractVector{<:Number},Nothing} = nothing; kw...)\n\nDraws vertical lines at positions given in x (and optional y values).\n\n\n\n\n\n","category":"function"},{"location":"api/#UnicodePlots.xlabel!-Tuple{Plot, AbstractString}","page":"API","title":"UnicodePlots.xlabel!","text":"xlabel!(plot, newlabel)\n\nSets a new x-label for the given plot. Alternatively, the current label can be queried using xlabel.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.xlabel-Tuple{Plot}","page":"API","title":"UnicodePlots.xlabel","text":"xlabel(plot) -> String\n\nReturns the current label for the x-axis. Alternatively, the x-label can be changed with xlabel!.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.ylabel!-Tuple{Plot, AbstractString}","page":"API","title":"UnicodePlots.ylabel!","text":"ylabel!(plot, newlabel)\n\nSets a new y-label for the given plot. Alternatively, the current label can be queried using ylabel\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.ylabel-Tuple{Plot}","page":"API","title":"UnicodePlots.ylabel","text":"ylabel(plot) -> String\n\nReturns the current label for the y-axis. Alternatively, the y-label can be changed with ylabel!.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.zlabel!-Tuple{Plot, AbstractString}","page":"API","title":"UnicodePlots.zlabel!","text":"zlabel!(plot, newlabel)\n\nSets a new z-label (colorbar label) for the given plot. Alternatively, the current label can be queried using zlabel.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnicodePlots.zlabel-Tuple{Plot}","page":"API","title":"UnicodePlots.zlabel","text":"zlabel(plot) -> String\n\nReturns the current label for the z-axis (colorbar). Alternatively, the z-label can be changed with zlabel!.\n\n\n\n\n\n","category":"method"},{"location":"dev/#Development","page":"Development","title":"Development","text":"","category":"section"},{"location":"dev/#Low-level-interface","page":"Development","title":"Low-level interface","text":"","category":"section"},{"location":"dev/","page":"Development","title":"Development","text":"The primary structures that do all the heavy lifting behind the curtain are subtypes of Canvas. A canvas is a graphics object for rasterized plotting. Basically, it uses Unicode characters to represent pixel.","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"Here is a simple example:","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"import UnicodePlots: Plot, BrailleCanvas, lines!, points!, pixel!\ncanvas = BrailleCanvas(15, 40,                    # number of rows and columns (characters)\n                       origin_y=0., origin_x=0.,  # position in virtual space\n                       height=1., width=1.)       # size of the virtual space\nlines!(canvas, 0., 0., 1., 1.; color=:cyan)       # virtual space\npoints!(canvas, rand(50), rand(50); color=:red)   # virtual space\nlines!(canvas, 0., 1., .5, 0.; color=:yellow)     # virtual space\npixel!(canvas, 5, 8; color=:red)                  # pixel space\nPlot(canvas)","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"You can access the height and width of the canvas (in characters) with nrows(canvas) and ncols(canvas) respectively. You can use those functions in combination with print_row to embed the canvas anywhere you wish. For example, print_row(STDOUT, canvas, 3) writes the third character row of the canvas to the standard output.","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"As you can see, one issue that arises when multiple pixel are represented by one character is that it is hard to assign color. That is because each of the \"pixel\" of a character could belong to a different color group (each character can only have a single color). This package deals with this using a color-blend for the whole group. You can disable canvas color blending / mixing by passing blend=false to any function.","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"import UnicodePlots: Plot, BrailleCanvas, lines!\ncanvas = BrailleCanvas(15, 40; origin_y=0., origin_x=0., height=1., width=1.)\nlines!(canvas, 0., 0., 1., 1.; color=:cyan)\nlines!(canvas, .25, 1., .5, 0.; color=:yellow)\nlines!(canvas, .2, .8, 1., 0.; color=:red)\nPlot(canvas)","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"The following types of Canvas are implemented:","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"BrailleCanvas: This type of canvas is probably the one with the highest resolution for Unicode plotting. It essentially uses the Unicode characters of the Braille symbols as pixels. This effectively turns every character into eight pixels that can individually be manipulated using binary operations.\nBlockCanvas: This canvas is also Unicode based. It has half the resolution of the BrailleCanvas. In contrast to BrailleCanvas, the pixels don't have visible spacing between them. This canvas effectively turns every character into four pixels that can individually be manipulated using binary operations.\nHeatmapCanvas: This canvas is also Unicode based. It has half the resolution of the BlockCanvas. This canvas effectively turns every character into two color pixels, using the foreground and background terminal colors. As such, the number of rows of the canvas is half the number of y coordinates being displayed.\nAsciiCanvas and DotCanvas: These two canvas utilizes only standard ASCII character for drawing. Naturally, it doesn't look quite as nice as the Unicode-based ones. However, in some situations it might yield better results. Printing plots to a file is one of those situations.\nDensityCanvas: Unlike the BrailleCanvas, the density canvas does not simply mark a \"pixel\" as set. Instead it increments a counter per character that keeps track of the frequency of pixels drawn in that character. Together with a variable that keeps track of the maximum frequency, the canvas can thus draw the density of data-points.\nBarplotGraphics: This graphics area is special in that it does not support any pixel manipulation. It is essentially the barplot without decorations but the numbers. It does only support one method addrow! which allows the user to add additional bars to the graphics object.","category":"page"},{"location":"dev/#Developer-notes","page":"Development","title":"Developer notes","text":"","category":"section"},{"location":"dev/","page":"Development","title":"Development","text":"Because Julia uses column-major indexing order for an array type, and because displaying data on a terminal is row based, we need an internal buffer compatible with efficient columns based iteration. We solve this by using the transpose of a (width, height) array for indexing into an internal buffer like buf[row, col] or buf[y, x]. Common users of UnicodePlots don't need to be aware of this axis difference if sticking to public interface.","category":"page"},{"location":"dev/","page":"Development","title":"Development","text":"using UnicodePlots  # hide\np = Plot([NaN], [NaN]; xlim=(1, 10), ylim=(1, 10), title=\"internal buffer conventions\")\n\n# plot axes\nvline!(p, 1, head_tail=:head, color=:green, name=\"y-axis (rows)\")\nhline!(p, 1, head_tail=:head, color=:red, name=\"x-axis (cols)\")\n\n# square\nvline!(p, 2, [2, 9], color=:cyan, name=\"buf[y, x] - buf[row, col]\")\nvline!(p, [2, 9], [2, 9], color=:cyan)\nhline!(p, [2, 9], [2, 9], color=:cyan)\n\n# internal axes\nvline!(p, 3, range(3, 8; length=20), head_tail=:tail, color=:light_green, name=\"y-buffer (rows)\")\nhline!(p, 8, range(3, 8; length=20), head_tail=:head, color=:light_red, name=\"x-buffer (cols)\")\n\n# mem layout\nvline!(p, 4, [4, 7]; color=:yellow, name=\"memory layout\")\nvline!(p, 7, [4, 7]; color=:yellow)\nhline!(p, [4, 7], [4, 7]; color=:yellow)\nhline!(p, [4.5, 5, 5.5, 6], [4.5, 6.5]; color=:yellow)","category":"page"},{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/#Line-plots:-lineplot","page":"Interface","title":"Line plots: lineplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nlineplot([1, 2, 7], [9, -6, 8], title=\"My Lineplot\")","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"It's also possible to specify a function and a range:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"plt = lineplot(-π/2, 2π, [cos, sin])","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"You can also plot lines by specifying an intercept and slope:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"lineplot!(plt, -.5, .2, name=\"line\")","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Plotting multiple series is supported by providing a Matrix (<: AbstractMatrix) for the y argument, with the individual series corresponding to its columns. Auto-labeling is by default, but you can also label each series by providing a Vector or a 1xn Matrix such as [\"series 1\" \"series2\" ...]:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"lineplot(1:10, [0:9 3:12 reverse(5:14) fill(4, 10)], color=[:green :red :yellow :cyan])","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Physical quantities of Unitful.jl are supported through package extensions - weak dependencies:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"using Unitful\na, t = 1u\"m/s^2\", (0:100) * u\"s\"\nlineplot(a / 2 * t .^ 2, a * t, xlabel=\"position\", ylabel=\"speed\", height=10)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Intervals from IntervalSets.jl are supported:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"using IntervalSets\nlineplot(-1..3, x -> x^5 - 5x^4 + 5x^3 + 5x^2 - 6x - 1; name=\"quintic\")","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Use head_tail to mimic plotting arrows (:head, :tail or :both) where the length of the \"arrow\" head or tail is controlled using head_tail_frac where e.g. giving a value of 0.1 means 10% of the segment length:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"lineplot(1:10, 1:10, head_tail=:head, head_tail_frac=.1, height=4)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"UnicodePlots exports hline! and vline! for drawing vertical and horizontal lines on a plot:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"plt = Plot([NaN], [NaN]; xlim=(0, 8), ylim=(0, 8))\nvline!(plt, [2, 6], [2, 6], color=:red)\nhline!(plt, [2, 6], [2, 6], color=:white)\nhline!(plt, 7, color=:cyan)\nvline!(plt, 1, color=:yellow)","category":"page"},{"location":"interface/#Scatter-plots:-scatterplot","page":"Interface","title":"Scatter plots: scatterplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nscatterplot(randn(50), randn(50), title=\"My Scatterplot\")","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Axis scaling (xscale and/or yscale) is supported: choose from (:identity, :ln, :log2, :log10) or use an arbitrary scale function:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"scatterplot(1:10, 1:10, xscale=:log10, yscale=:log10)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"For the axis scale exponent, one can revert to using ASCII characters instead of Unicode ones using the keyword unicode_exponent=false:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"scatterplot(1:4, 1:4, xscale=:log10, yscale=:ln, unicode_exponent=false, height=6)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Using a marker is supported, choose a Char, a unit length String or a symbol name such as :circle (more from keys(UnicodePlots.MARKERS)).   One can also provide a vector of markers and/or colors as in the following example:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"scatterplot([1, 2, 3], [3, 4, 1], marker=[:circle, '', \"∫\"],\n            color=[:cyan, nothing, :yellow], height=2)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"As with lineplot, scatterplot supports plotting physical Unitful quantities, or plotting multiple series (Matrix argument).","category":"page"},{"location":"interface/#Staircase-plots:-stairs","page":"Interface","title":"Staircase plots: stairs","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nstairs([1, 2, 4, 7, 8], [1, 3, 4, 2, 7],\n       color=:yellow, style=:post, height=6, title=\"Staircase\")","category":"page"},{"location":"interface/#Bar-plots:-barplot","page":"Interface","title":"Bar plots: barplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nbarplot([\"Paris\", \"New York\", \"Madrid\"], [2.244, 8.406, 3.165], title=\"Population\")","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Note: You can use the keyword argument symbols to specify the characters that should be used to plot the bars (e.g. symbols=['#']).","category":"page"},{"location":"interface/#Histogram-plots:-histogram","page":"Interface","title":"Histogram plots: histogram","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nhistogram(randn(1_000) .* .1, nbins=15, closed=:left)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"The histogram function also supports axis scaling using the parameter xscale:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"histogram(randn(1_000) .* .1, nbins=15, closed=:right, xscale=:log10)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Vertical histograms are supported:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"histogram(randn(100_000) .* .1, nbins=60, vertical=true, height=10)","category":"page"},{"location":"interface/#Box-plots:-boxplot","page":"Interface","title":"Box plots: boxplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nboxplot([1, 3, 3, 4, 6, 10])","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"boxplot([\"one\", \"two\"],\n        [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]],\n        title=\"Grouped Boxplot\", xlabel=\"x\")","category":"page"},{"location":"interface/#Sparsity-pattern-plots:-spy","page":"Interface","title":"Sparsity pattern plots: spy","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nusing SparseArrays\nspy(sprandn(50, 120, .05))","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Plotting the zeros pattern is also possible using show_zeros=true:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"using SparseArrays\nspy(sprandn(50, 120, .9), show_zeros=true)","category":"page"},{"location":"interface/#Density-plots:-densityplot","page":"Interface","title":"Density plots: densityplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nplt = densityplot(randn(10_000), randn(10_000))\ndensityplot!(plt, randn(10_000) .+ 2, randn(10_000) .+ 2)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Using a scale function (e.g. for damping peaks) is supported using the dscale keyword:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"x = randn(10_000); x[1_000:6_000] .= 2\ndensityplot(x, randn(10_000); dscale=x -> log(1 + x))","category":"page"},{"location":"interface/#Contour-plots:-contourplot","page":"Interface","title":"Contour plots: contourplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\ncontourplot(-3:.01:3, -7:.01:3, (x, y) -> exp(-(x / 2)^2 - ((y + 2) / 4)^2))","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"The keyword levels controls the number of contour levels. One can also choose a colormap as with heatmap, and disable the colorbar using colorbar=false.","category":"page"},{"location":"interface/#Polar-plots:-polarplot","page":"Interface","title":"Polar plots: polarplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"Plots data in polar coordinates with θ the angles in radians.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\npolarplot(range(0, 2π, length=20), range(0, 2, length=20))","category":"page"},{"location":"interface/#Heatmap-plots:-heatmap","page":"Interface","title":"Heatmap plots: heatmap","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nheatmap(repeat(collect(0:10)', outer=(11, 1)), zlabel=\"z\")","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"The heatmap function also supports axis scaling using the parameters xfact, yfact and axis offsets after scaling using xoffset and yoffset.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"The colormap parameter may be used to specify a named or custom colormap. See the heatmap function documentation for more details.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"In addition, the colorbar and colorbar_border options may be used to toggle the colorbar and configure its border.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"The zlabel option and zlabel! method may be used to set the z axis (colorbar) label.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Use the array keyword in order to display the matrix in the array convention (as in the repl).","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"heatmap(collect(0:30) * collect(0:30)', xfact=.1, yfact=.1, xoffset=-1.5, colormap=:inferno)","category":"page"},{"location":"interface/#Image-plots:-imageplot","page":"Interface","title":"Image plots: imageplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"Draws an image, and surround it with decorations. Sixel are supported (experimental) under a compatible terminal through ImageInTerminal (which must be imported before UnicodePlots).","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nimport ImageInTerminal  # mandatory (triggers extension - weak dependency - loading)\nusing TestImages\nimageplot(testimage(\"monarch_color_256\"), title=\"monarch\")","category":"page"},{"location":"interface/#Surface-plots:-surfaceplot","page":"Interface","title":"Surface plots: surfaceplot","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"Plots a colored surface using height values z above a x-y plane, in three dimensions (masking values using NaNs is supported).","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\nsombrero(x, y) = 15sinc(√(x^2 + y^2) / π)\nsurfaceplot(-8:.5:8, -8:.5:8, sombrero, colormap=:jet)","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Use lines=true to increase the density (underlying call to lineplot instead of scatterplot, with color interpolation). By default, surfaceplot scales heights to adjust aspect wrt the remaining axes with zscale=:aspect. To plot a slice in 3D, use an anonymous function which maps to a constant value: zscale=z -> a_constant:","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"surfaceplot(\n  -2:2, -2:2, (x, y) -> 15sinc(√(x^2 + y^2) / π),\n  zscale=z -> 0, lines=true, colormap=:jet\n)","category":"page"},{"location":"interface/#Isosurface-plots:-isosurface","page":"Interface","title":"Isosurface plots: isosurface","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"Uses MarchingCubes.jl to extract an isosurface, where isovalue controls the surface isovalue. Using centroid enables plotting the triangulation centroids instead of the triangle vertices (better for small plots). Back face culling (hide not visible facets) can be activated using cull=true. One can use the legacy 'Marching Cubes' algorithm using legacy=true.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"using UnicodePlots  # hide\ntorus(x, y, z, r=0.2, R=0.5) = (√(x^2 + y^2) - R)^2 + z^2 - r^2\nisosurface(-1:.1:1, -1:.1:1, -1:.1:1, torus, cull=true, zoom=2, elevation=50)","category":"page"},{"location":"#UnicodePlots.jl","page":"Home","title":"UnicodePlots.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"UnicodePlots is a unicode-based scientific plotting library for working in a terminal, using Julia's REPL.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The source code is hosted on github: UnicodePlots.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install UnicodePlots, start up julia in a terminal and type the following code snippet into the REPL (this makes use of the native Julia package manager named Pkg):","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"UnicodePlots\")","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a quick hello world example of a typical use-case:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using UnicodePlots\nlineplot([-1, 2, 3, 7], [-1, 2, 9, 4], title=\"Example\", name=\"my line\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are other types of Canvas available (see section Low-level Interface).","category":"page"},{"location":"","page":"Home","title":"Home","text":"In some situations, such as printing to a file, using AsciiCanvas, DotCanvas or BlockCanvas might lead to better results:","category":"page"},{"location":"","page":"Home","title":"Home","text":"plt = lineplot([-1, 2, 3, 7], [-1, 2, 9, 4], title=\"Example\", name=\"my line\",\n               xlabel=\"x\", ylabel=\"y\", canvas=DotCanvas, border=:ascii)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some plot methods have a mutating variant that ends with an exclamation mark (bang convention):","category":"page"},{"location":"","page":"Home","title":"Home","text":"lineplot!(plt, [0, 4, 8], [10, 1, 10], color=:cyan, name=\"other line\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"These mutating methods cannot update the limits of the axes as plots are drawn onto a fixed canvas. The limits must be set beforehand by the plotting function that creates the figure or by creating an empty Plot:","category":"page"},{"location":"","page":"Home","title":"Home","text":"p = Plot(; xlim=(-1, 3), ylim=(-1, 3))\nlineplot!(p, 1:2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"One can adjust the plot height and width to the current terminal size by using height=:auto and/or width=:auto. When using width=:auto, it is advised to use the compact=true keyword in order to maximize the plot size.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can reverse/flip the Plot axes by setting xflip=true and/or yflip=true on plot creation.","category":"page"}]
}
