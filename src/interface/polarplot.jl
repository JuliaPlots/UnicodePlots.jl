"""
    polarplot(Œ∏, ùìá; kw...)

Draws angles and radii on a polar plot.

# Usage

    polarplot(Œ∏, ùìá)

# Arguments

$(arguments(
    (
        Œ∏ = "angles values (radians)",
        ùìá = "radii, or `Function` evaluated as `ùìá(Œ∏)`",
    )
))

# Author(s)

- T Bltg (github.com/t-bltg)

# Examples

```julia-repl
julia> polarplot(range(0, 2œÄ, length = 20), range(0, 2, length = 20))
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
    2 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°§‚†§‚†í‚†í‚†â‚†â‚†â‚†â‚†â‚°è‚†â‚†â‚†â‚†â‚†ì‚†í‚†¶‚†§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°§‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†í‚†§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†û‚†ì‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†ú‚†ì‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚£†‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†¢‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†±‚£Ñ‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚°¥‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚†§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢¶‚†Ä‚†Ä 
      ‚†Ä‚°∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£à‚†∂‚¢ñ‚†í‚†í‚†í‚†¢‚£á‚°Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£á‚†Ä 
      ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†â‚†¢‚£Ä‚†Ä‚°á‚¢£‚°†‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä 
      ‚†Ä‚°ß‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚¢§‚†ß‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚°µ‚°∑‚°≠‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚¢º‚†Ä 
      ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†Ä‚°á‚†à‚†í‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢ø‚†Ä 
      ‚†Ä‚¢±‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ä‚†Ä‚†Ä‚¢Ä‚°†‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†â‚†¢‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢é‚°è‚†Ä 
      ‚†Ä‚†Ä‚†≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚°†‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚†§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚¢Å‚†û‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†ô‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†à‚†¢‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†í‚¢Ñ‚¢Ä‚°†‚†î‚†Å‚°∞‚†ã‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚¢¶‚°†‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†í‚†¢‚¢Ñ‚£Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚°†‚†î‚†ä‚†â‚¢¢‚°§‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚†§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚°è‚†â‚†â‚†â‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†í‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
   -2 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚†í‚†§‚†§‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£á‚£Ä‚£Ä‚£Ä‚£Ä‚°§‚†§‚†ñ‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
      ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä 
      ‚†Ä-2‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä2‚†Ä 

"""
function polarplot(Œ∏::AbstractVector, ùìá::Union{Function,AbstractVector})
    ùìá = ùìá isa Function ? ùìá.(Œ∏) : ùìá

    mr, Mr = extrema(ùìá)
    x = y = [-Mr, +Mr]
    lims = -Mr, +Mr
    plot = Plot(x, y; xlim = lims, ylim = lims, grid = false, border = :none)
    polarplot!(plot, Œ∏, ùìá)
end

function polarplot!(plot::Plot{<:Canvas}, Œ∏::AbstractVector, ùìá::AbstractVector)
    mr, Mr = extrema(ùìá)

    # drawing grid
    theta = range(0, 2œÄ, length = 360)
    grid_color = BORDER_COLOR[]
    lineplot!(plot, Mr * cos.(theta), Mr * sin.(theta), color = grid_color)

    for theta in 0:(œÄ / 4):(2œÄ)
        lineplot!(plot, [mr, Mr] .* cos(theta), [mr, Mr] .* sin(theta), color = grid_color)
    end

    # drawing user data
    lineplot!(plot, ùìá .* cos.(Œ∏), ùìá .* sin.(Œ∏))
    plot
end
