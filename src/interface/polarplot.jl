"""
    polarplot(╬И, ­ЮЊЄ; kw...)

Draws angles and radii on a polar plot.

# Usage

    polarplot(╬И, ­ЮЊЄ)

# Arguments

$(arguments(
    (
        ╬И = "angles values (radians)",
        ­ЮЊЄ = "radii, or `Function` evaluated as `­ЮЊЄ(╬И)`",
        degrees = "label angles using degrees",
        num_rad_lab = "number of radius labels",
        ang_rad_lab = "angle where the radius labels are drawn",
        scatter = "use scatter instead of lines",
    )
))

# Author(s)

- T Bltg (github.com/t-bltg)

# Examples

```julia-repl
julia> polarplot(range(0, 2¤ђ, length = 20), range(0, 2, length = 20))
        РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ90┬░РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ   
        РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ   
        РађРађРађРађРађРађРађРађРађРађРађРБђРАцРацРањРањРаЅРаЅРаЅРаЅРаЅРАЈРаЅРаЅРаЅРаЅРаЊРањРадРацРБђРађРађРађРађРађРађРађРађРађРађРађ   
        РађРађРађРађРађРађРађРбђРАцРањРаЅРађРађРађРађРађРађРађРађРађРађРАЄРађРађРађРађРађРађРађРађРађРаЅРањРацРАђРађРађРађРађРађРађРађ   
        РађРађРађРађРађРАаРаъРаЊРбёРађРађРађРађРађРађРађРађРађРађРађРађРАЄРађРађРађРађРађРађРађРађРађРађРађРбђРаю2РбёРађРађРађРађРађ   
        РађРађРађРБаРаіРађРађРађРађРаЅРабРБђРађРађРађРађРађРађРађРађРађРАЄРађРађРађРађРађРађРађРађРбђРАаРаіРаЂРађРађРађРа▒РБёРађРађРађ   
        РађРађРА┤РаЂРађРађРађРађРађРађРађРађРаЉРацРАђРађРађРађРађРађРађРАЄРађРађРађРађРађРађ1РаћРаЂРађРађРађРађРађРађРађРаѕРбдРађРађ   
        РађРАИРаЂРађРађРађРађРађРађРађРађРађРађРбђРБѕРаХРбќРањРањРањРабРБЄРАђРађРађРбђРаћРаіРађРађРађРађРађРађРађРађРађРађРађРаѕРБЄРађ   
        РађРАЄРађРађРађРађРађРађРађРађРађРбђРаћРаЂРађРађРађРаЅРабРБђРађРАЄРбБРАаРаіРаЂРађРађРађРађРађРађРађРађРађРађРађРађРађРађРбИРађ   
   180┬░ РађРАДРацРацРацРацРацРацРацРацРбцРаДРацРацРацРацРацРацРацРацРАх0РАГРацРацРацРацРацРацРацРацРацРацРацРацРацРацРацРацРацРб╝Рађ 0┬░
        РађРАЄРађРађРађРађРађРађРађРађРбИРађРађРађРађРађРађРбђРаћРаіРађРАЄРаѕРањРбёРађРађРађРађРађРађРађРађРађРађРађРађРађРађРбђРб┐Рађ   
        РађРб▒РАђРађРађРађРађРађРађРађРаИРАђРађРађРбђРАаРаіРаЂРађРађРађРАЄРађРађРађРаЅРабРБђРађРађРађРађРађРађРађРађРађРађРбђРбјРАЈРађ   
        РађРађРа│РАђРађРађРађРађРађРађРађРа▒РАаРаћРаЂРађРађРађРађРађРађРАЄРађРађРађРађРађРађРаЉРацРАђРађРађРађРађРађРбђРаћРбЂРаъРађРађ   
        РађРађРађРаЎРбёРађРађРађРађРбђРаћРаіРаѕРабРБђРађРађРађРађРађРађРАЄРађРађРађРађРађРађРађРађРаѕРањРбёРбђРАаРаћРаЂРА░РаІРађРађРађ   
        РађРађРађРађРађРаЉРбдРАаРаіРаЂРађРађРађРађРађРаЅРањРабРбёРБђРађРАЄРађРађРађРађРађРбђРБђРБђРАаРаћРаіРаЅРббРАцРаіРађРађРађРађРађ   
        РађРађРађРађРађРађРађРаѕРаЊРацРБђРађРађРађРађРађРађРађРађРаѕРаЅРАЈРаЅРаЅРаЅРаЅРаЅРаЂРађРађРађРБђРацРањРаЂРађРађРађРађРађРађРађ   
        РађРађРађРађРађРађРађРађРађРађРађРаЅРаЊРањРацРацРБђРБђРБђРБђРБђРБЄРБђРБђРБђРБђРАцРацРаќРањРаЅРађРађРађРађРађРађРађРађРађРађРађ   
        РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ   
        РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ270┬░РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађ   

"""
function polarplot(╬И::AbstractVector, ­ЮЊЄ::Union{Function,AbstractVector}; kw...)
    ­ЮЊЄ = ­ЮЊЄ isa Function ? ­ЮЊЄ.(╬И) : ­ЮЊЄ

    mr, Mr = extrema(­ЮЊЄ)
    x = y = [-Mr, +Mr]
    lims = -Mr, +Mr
    plot = Plot(
        x,
        y;
        xlim = lims,
        ylim = lims,
        grid = false,
        border = :none,
        xticks = false,
        yticks = false,
        blend = false,
    )
    polarplot!(plot, ╬И, ­ЮЊЄ; kw...)
end

function polarplot!(
    plot::Plot{<:Canvas},
    ╬И::AbstractVector,
    ­ЮЊЄ::AbstractVector;
    degrees = true,
    num_rad_lab = 3,
    ang_rad_lab = ¤ђ / 4,
    scatter = false,
    kw...,
)
    mr, Mr = extrema(­ЮЊЄ)

    # grid
    theta = range(0, 2¤ђ, length = 360)
    grid_color = BORDER_COLOR[]
    lineplot!(plot, Mr * cos.(theta), Mr * sin.(theta), color = grid_color)

    for theta in 0:(¤ђ / 4):(2¤ђ)
        lineplot!(plot, [mr, Mr] .* cos(theta), [mr, Mr] .* sin(theta); color = grid_color)
    end

    # user data
    (scatter ? scatterplot! : lineplot!)(plot, ­ЮЊЄ .* cos.(╬И), ­ЮЊЄ .* sin.(╬И); kw...)

    # labels
    row = round(Int, nrows(plot.graphics) / 2)
    label!(plot, :r, row, degrees ? "0┬░" : "0", color = grid_color)
    label!(plot, :t, degrees ? "90┬░" : "¤ђ / 2", color = grid_color)
    label!(plot, :l, row, degrees ? "180┬░" : "¤ђ", color = grid_color)
    label!(plot, :b, degrees ? "270┬░" : "3¤ђ / 4", color = grid_color)

    for r in range(mr, Mr, length = num_rad_lab)
        annotate!(
            plot,
            r * cos(ang_rad_lab),
            r * sin(ang_rad_lab),
            isinteger(r) ? string(round(Int, r)) : @sprintf("%.1f", r);
            color = grid_color,
        )
    end
    plot
end
